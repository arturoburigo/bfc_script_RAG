[
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Critério  \n### Criação  \nA criação de um novo critério acontece das seguintes maneiras:  \n###### Iniciando uma expressão  \n```bfc-script\nCriterio.onde(campo);\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### Iniciando uma expressão  \n```bfc-script\nCriterio.onde(campo);\n```  \nEsse é o caso mais comum, onde a configuração padrão do critério já atende. Através dessa forma, o critério é criado já se iniciando uma expressão.  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```  \n###### Configurando o critério",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('nome').igual('João');\n```  \n###### Configurando o critério  \nConfiguração de parâmetro obrigatório:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio() ] );\n```  \nConfiguração padrão:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.opcional() ] );\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Configuração padrão:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.opcional() ] );\n```  \nAceita um template que vai ser utilizado na geração da mensagem de erro quando um parâmetro de uma condição não tiver seu valor informado:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio(template_mensagem_validacao) ] );\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio(template_mensagem_validacao) ] );\n```  \nPor padrão, os valores utilizados como parâmetros, são opcionais, e caso seu valor seja nulo, a expressão é desconsiderada na geração do filtro:  \n```bfc-script\nvalorIdade = nulo;\nvalorNome = 'João';\nCriterio.onde('idade').igual(valorIdade).e('nome').igual(valorNome);\n```  \nO critério a acima geraria o seguinte filtro:  \n```bfc-script\n'nome = \"João\"'\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\n'nome = \"João\"'\n```  \n### Operações  \nApós a criação do critério, é possível fazer uso um conjunto de operações de comparação.  \n###### Operações de comparação  \n* igual(valor)\n* diferenteDe(valor)\n* maiorQue(valor)\n* maiorOuIgualQue(valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* maiorQue(valor)\n* maiorOuIgualQue(valor)\n* menorQue(valor)\n* menorOuIgualQue(valor)\n* ehNulo() `nome is null`\n* naoEhNulo() `nome is not null`\n* ehVerdadeiro() `responsavel is true`\n* ehFalso() `responsavel is false`",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": false
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* ehFalso() `responsavel is false`\n* naoEhVerdadeiro() `responsavel is false`\n* naoEhFalso() `responsavel is true`\n* comecaCom(valor) `nome like \"P%\"`\n* naoComecaCom(valor) `nome not like \"P%\"`\n* terminaCom(valor) `nome like \" %P\"`",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": false
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* terminaCom(valor) `nome like \" %P\"`\n* naoTerminaCom(valor) `nome not like \" %P\"`\n* contem(valor) `nome like \"%João%\"`\n* naoContem(valor) `nome not like \"%João%\"`\n* contidoEm(valores) `nome in (\"João\", \"Maria\")`",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": false
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* contidoEm(valores) `nome in (\"João\", \"Maria\")`\n* naoContidoEm(valores) `nome not in (\"João\", \"Maria\")`\nExemplo de utilização:  \n```bfc-script\nCriterio.onde('idade').igual(40);\nCriterio.onde('casado).ehFalso();\nCriterio.padrao().onde('agencia').ehNulo();\nCriterio.novo([ parametros: Criterio.obrigatorio('É necessário informar um valor para o campo ${campo}') ]).onde('idade').igual(27);\n```  \n#### Obrigatoriedade dos valores",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('idade').igual(40);\nCriterio.onde('casado).ehFalso();\nCriterio.padrao().onde('agencia').ehNulo();\nCriterio.novo([ parametros: Criterio.obrigatorio('É necessário informar um valor para o campo ${campo}') ]).onde('idade').igual(27);\n```  \n#### Obrigatoriedade dos valores  \nCaso seja necessário configurar a obrigatoriedade dos valores de forma pontual, é possível configurar em qualquer operação que aceite um valor como parâmetro:  \n```bfc-script\nCriterio.onde('idade').igual(valor, [ parametro: Criterio.obrigatorio() ]);\nCriterio.novo([ parametros: Criterio.obrigatorio('É necessário informar um valor para o campo ${campo}') ]).onde('idade').igual(27).e('nome').igual(valorNome, [ parametro: Criterio.opcional() ]);\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('idade').igual(valor, [ parametro: Criterio.obrigatorio() ]);\nCriterio.novo([ parametros: Criterio.obrigatorio('É necessário informar um valor para o campo ${campo}') ]).onde('idade').igual(27).e('nome').igual(valorNome, [ parametro: Criterio.opcional() ]);\n```  \nQuando se configura a obrigatoriedade para todos os parâmetros do critério, a propriedade se chama **parametros**. Porém quando é configurado a nível de operação, se chama **parametro**.",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Delimitador nas operações contidoEm/naoContidoEm  \nPara as operações **contidoEm** e **naoContidoEm** pode ser informado um delimitador para os valores que não são String.  \n#### Com delimitador  \n```bfc-script\nnumero = [1,2,5]\ncriterio = Criterio.onde('idade').contidoEm(numero, [delimitador: '\"']);\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Com delimitador  \n```bfc-script\nnumero = [1,2,5]\ncriterio = Criterio.onde('idade').contidoEm(numero, [delimitador: '\"']);\n```  \nO critério acima, gera o seguinte filtro:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```0  \n#### Sem delimitador  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```1  \nO critério acima, gera o seguinte filtro:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```2  \n#### Com formatação e delimitador  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('nome').igual('João');\n```3  \nO critério acima, gera o seguinte filtro:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```4  \n### Filtros compostos  \nOs filtros podem ser utilizados de forma composta, fazendo uso do **e** ou do **ou** :  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```5  \nO critério acima, gera o seguinte filtro:",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O critério acima, gera o seguinte filtro:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```6  \n### Agrupamento  \nO critério tem suporte a **grupos** , através da seguinte chamada:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```7  \nO critério acima, gera o seguinte filtro:  \n```bfc-script\nCriterio.onde('nome').igual('João');\n```8  \n### Datas",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('nome').igual('João');\n```8  \n### Datas  \nAtualmente a engine de scripts tem suporte a **datas** através de seu formato completo (data e hora), e no critério ela é representada através do formato [ISO 8601](https://pt.wikipedia.org/wiki/ISO_8601)",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCriterio.onde('nome').igual('João');\n```9  \nO critério acima, gera um filtro parecido com:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio() ] );\n```0  \nCaso queira submeter a data no filtro utilizando outros formatos, as seguintes opções estão disponíveis:",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_criterio",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Informar uma das formatações pré-definidas (data e hora)  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio() ] );\n```1  \nOs critérios acima, geram os seguintes filtros:  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio() ] );\n```2  \n#### Informar uma formatação customizada  \n```bfc-script\nCriterio.novo( [ parametros: Criterio.obrigatorio() ] );\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_criterio.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### API Padrão",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A engine padrão disponibiliza uma API com várias funções utilitárias para manipulação de datas, caracteres e números. As funções são separadas por classes e são invocadas como métodos. Alguns métodos para manipulação de datas e caracteres podem ser",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "para manipulação de datas e caracteres podem ser utilizados de maneira direta, invocando o método apartir do próprio elemento, não necessitando a invocação através da classe. Durante a explanação das funções, serão sinalizados, as que possuem",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "das funções, serão sinalizados, as que possuem alternativa de uso direta. Esta sessão abordará detalhes de cada função da API padrão. Essas funções estarão disponíveis ao usuário final, e serão absorvidas plenamente conforme a utilização. Sinta-se a",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "plenamente conforme a utilização. Sinta-se a vontade para pular esta sessão neste primeiro momento.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Caracteres  \n##### capitaliza  \nPor meio desta função é possível colocar a primeira letra de cada palavra de um texto em maiúsculo e as outras letras para minúsculo.  \n```bfc-script\nCaracteres.capitaliza(texto)\n```  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```  \n##### direita",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```  \n##### direita  \nObtem uma quantidade específica de caracteres iniciados da direita para esquerda.  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```  \n##### equivalente",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.direita(quantidade)\n```  \n##### equivalente  \nVerifica se uma expressão esta contida em um texto. Mais sobre [expressões regulares](http://guia-er.sourceforge.net/metacaracteres.html#2)  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```  \n_Alternativa_  \n```bfc-script\ntexto.equivalente(expressao)\n```  \n##### esquerda",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.equivalente(expressao)\n```  \n##### esquerda  \nObtem uma quantidade específica de caracteres iniciados da esquerda para direita.  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```  \n##### maisculo",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```  \n##### maisculo  \nConverte todos os caracteres de um texto em maiúsculo.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```  \n##### minusculo  \nConverte todos os caracteres de um texto em minusculo.  \n```bfc-script\ntexto.capitaliza\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```0  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```1  \n##### posicao  \nObtem a posição onde um caracter se encontra em uma texto.  \n```bfc-script\ntexto.capitaliza\n```2  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```3  \n##### posicao",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```3  \n##### posicao  \nObtem a posição inicial de uma [expressão regular](http://guia-er.sourceforge.net/metacaracteres.html#2) em uma texto.  \n```bfc-script\ntexto.capitaliza\n```4  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```5  \n##### posicaoFinal",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```5  \n##### posicaoFinal  \nObtem a posição final de uma [expressão regular](http://guia-er.sourceforge.net/metacaracteres.html#2) em uma texto.  \n```bfc-script\ntexto.capitaliza\n```6  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```7  \n##### removeEspacos",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```7  \n##### removeEspacos  \nRemover o excesso de espaços de um texto.  \n```bfc-script\ntexto.capitaliza\n```8  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```9  \n##### removeEspacosDireita  \nRemove o excesso de espaços de um texto à esquerda.  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```0  \n_Alternativa_",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.direita(texto, quantidade)\n```0  \n_Alternativa_  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```1  \n##### removeEspacosEsquerda  \nRemove o excesso de espaços de um texto à direita.  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```2  \n_Alternativa_  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```3  \n##### repetir",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```3  \n##### repetir  \nRepete um texto especificado de acordo com uma quantidade definida.  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```4  \n_Alternativa_  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Um exemplo prático de utilização é para completar os caracteres de um campo de um leiaute bancário. Por exemplo, no leiaute tem o campo nome com 100 caracteres, porém, se o nome não tiver 100 caracteres, então, o campo deve ser preenchido com",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "então, o campo deve ser preenchido com espaços em branco à direita.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Segue um exemplo de preenchimento de um campo do tipo String:  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```6  \nSegue um outro exemplo, utilizando o mesmo leiaute bancário, de preenchimento com zeros à esquerda para um determinado campo do tipo numérico:  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.direita(texto, quantidade)\n```7  \n##### sobrepor  \nSobrepõe um texto em outro em uma determinada posição e com uma quantidade especifica de caracteres.  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```8  \n_Alternativa_  \n```bfc-script\nCaracteres.direita(texto, quantidade)\n```9  \n##### substituir",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.direita(texto, quantidade)\n```9  \n##### substituir  \nSubstitui as ocorrências de uma expressão localizada em um texto por outra expressão.  \n```bfc-script\ntexto.direita(quantidade)\n```0  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```1  \n##### subTexto",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```1  \n##### subTexto  \nObtém um número específico de caracteres de uma posição especifica de um texto.  \n```bfc-script\ntexto.direita(quantidade)\n```2  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```3  \n##### tamanho  \nObtem o tamanho de um texto.  \n```bfc-script\ntexto.direita(quantidade)\n```4",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Obtem o tamanho de um texto.  \n```bfc-script\ntexto.direita(quantidade)\n```4  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```5  \n##### vazio  \nVerifica se uma palavra esta vazia.  \n```bfc-script\ntexto.direita(quantidade)\n```6  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```7  \n##### dividir",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```7  \n##### dividir  \nEsta função divide um texto de acordo com a expressão regular informada.  \n```bfc-script\ntexto.direita(quantidade)\n```8  \n_Alternativa_  \n```bfc-script\ntexto.direita(quantidade)\n```9  \n#### Expressões regulares",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.direita(quantidade)\n```9  \n#### Expressões regulares  \nA API de Caracteres suporta o uso de [expressões regulares](http://aurelio.net/regex/guia/) para realizar diversas operações baseadas em um padrão em textos.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.equivalente(texto, expressao)\n```0  \nAs expressões são representadas na linguagem de scripts utilizando o seguinte padrão: **~/expressão/**  \nExemplo:  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```1  \nAs operações disponíveis em um expressão são:  \n##### equivalente()",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### equivalente()  \nVerifica se o texto é totalmente equivalente a expressão.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```2  \n##### totalGrupos()  \nRetorna o total de [grupos](http://aurelio.net/regex/guia/grupo.html#2_4_3) da expressão regular.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.equivalente(texto, expressao)\n```3  \n##### dividir()  \nEsta função divide um texto de acordo com a expressão regular informada retornando uma lista com os valores separados.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```4  \n##### substituirPor(valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.equivalente(texto, expressao)\n```4  \n##### substituirPor(valor)  \nRealiza a substituição de todos os valores da expressão encontrados no texto pelo valor informado no parâmetro.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```5  \n##### substituirPrimeiroPor(valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### substituirPrimeiroPor(valor)  \nRealiza a substituição do primeiro valor da expressão encontrado no texto pelo valor informado no parâmetro.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```6  \n##### encontrouPadrao()  \nIndica se o padrão da expressão foi encontrado no texto.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.equivalente(texto, expressao)\n```7  \n##### concatenarValoresEncontrados()  \nRetorna todos os valores encontrados no texto pela expressão concatenados.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```8  \n##### concatenarValoresEncontrados(separador)",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### concatenarValoresEncontrados(separador)  \nRetorna todos os valores encontrados no texto pela expressão concatenados com o separador informado no parâmetro.  \n```bfc-script\nCaracteres.equivalente(texto, expressao)\n```9  \n##### Caractere de escape",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.equivalente(texto, expressao)\n```9  \n##### Caractere de escape  \nA seguinte linha de código provoca um erro de sintaxe:  \n```bfc-script\ntexto.equivalente(expressao)\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```0  \nIsto corre pois o compilador interpreta os caracteres de aspas duplas dentro da cadeia de caracteres como delimitadores. Para eliminar o problema emprega-se o caractere de escape \\ (barra contrária, ou backslash) antes das aspas:",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```1  \nVeja este caso:  \n```bfc-script\ntexto.equivalente(expressao)\n```2",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Veja este caso:  \n```bfc-script\ntexto.equivalente(expressao)\n```2  \nIsso ocorre porque o compilador interpreta as barras contrárias como caracteres de escape. Mas não é o que queremos. Queremos imprimir um caminho de pastas usando, literalmente, as barras contrárias:",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```3  \nDentro das expressões regulares, é necessário inserir, no caractere de escape, um **til** entre as barras contrárias:  \n```bfc-script\ntexto.equivalente(expressao)\n```4",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```4  \nVeja abaixo um exemplo usando caractere de escape. Repare que, dentro do último comando \"expressao\", há uma solcitiação de substituir uma barra por uma string vazia.  \n```bfc-script\ntexto.equivalente(expressao)\n```5  \n#### Múltiplas ocorrências e grupos",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Múltiplas ocorrências e grupos  \nUma expressão pode encontrar diversas ocorrências de um padrão em um texto. Estes valores podem ser organizados por grupos ou simplesmente por valor localizado.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Percorrendo todas as ocorrências encontradas em um texto:  \n```bfc-script\ntexto.equivalente(expressao)\n```6  \n##### posicaoInicial()  \nRetorna a posição inicial do texto que coincida com a expressão localizada. Caso o padrão não seja encontrado retorna -1.  \n##### posicaoFinal()",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### posicaoFinal()  \nRetorna a posição final do texto que coincida com a expressão localizada. Caso o padrão não seja encontrado retorna -1.  \n```bfc-script\ntexto.equivalente(expressao)\n```7  \n##### posicaoFinal()",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```7  \n##### posicaoFinal()  \nRetorna a posição final do texto que coincida totalmente com a expressão utilizada. Caso não encontrado retorna -1.  \n```bfc-script\ntexto.equivalente(expressao)\n```8  \n##### valoresGrupos()",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.equivalente(expressao)\n```8  \n##### valoresGrupos()  \nRetorna uma lista com todos os valores encontrados pelos grupos especificados na expressão.  \n```bfc-script\ntexto.equivalente(expressao)\n```9  \n##### valorGrupo(indice)  \nRetorna o valor do grupo encontrado conforme índice e expressão.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```0  \n##### valorEncontrado()  \nRetorna o conteúdo do texto encontrado de acordo com a expressão/grupo utilizado.  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```1  \n##### concatenarValoresGrupos()  \nRetorna os valores dos grupos da expressão concatenados.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```2  \n##### concatenarValoresGrupos(separador)  \nRetorna os valores dos grupos da expressão concatenados com o separador informado no parâmetro.  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```3  \n#### Datas  \n##### adicionaDias",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```3  \n#### Datas  \n##### adicionaDias  \nAdiciona uma quantidade especificada de dias à uma data.  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```4  \n_Alternativa_  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```5  \n##### adicionaHoras  \nAdiciona uma quantidade especificada de horas em uma data/hora.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```6  \n##### adicionaMeses",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona uma quantidade especificada de meses em uma data. Caso o dia da data especificadanão seja um dia válido para o mês resultante, Ex: 31/10/2011, adiciona 1 mês, valor inválido para nova data 31/11/2011, a diferença de dias será acrescentada",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "31/11/2011, a diferença de dias será acrescentada na nova data, Ex:31/10/2011, adiciona 1 mês fica 01/12/2011.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```7  \n_Alternativa_  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```8  \n##### adicionaMinutos  \nAdiciona uma quantidade especificada de minutos em uma data/hora.  \n```bfc-script\nCaracteres.esquerda(texto, quantidade)\n```9  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```0  \n##### adicionaSegundos",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.esquerda(quantidade)\n```0  \n##### adicionaSegundos  \nAdiciona uma quantidade especificada de segundos em uma data/hora.  \n```bfc-script\ntexto.esquerda(quantidade)\n```1  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```2  \n##### ano  \nObtem o ano em que se encontra uma determinada data.  \n```bfc-script\ntexto.esquerda(quantidade)\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.esquerda(quantidade)\n```3  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```4  \n##### data  \nGera uma data sem hora de acordo com o dia, mês e ano passados por parâmetro  \n```bfc-script\ntexto.esquerda(quantidade)\n```5  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```6  \n##### dataHora",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```6  \n##### dataHora  \nGera uma data com a hora de acordo com o dia, mês, ano, hora e minuto passados por parâmetro  \n```bfc-script\ntexto.esquerda(quantidade)\n```7  \n_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```8  \n##### dia",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.esquerda(quantidade)\n```8  \n##### dia  \nObtem o dia em que se encontra uma determinada data.  \n```bfc-script\ntexto.esquerda(quantidade)\n```9  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```0  \n##### diaSemana",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```0  \n##### diaSemana  \nObtem o dia da semana em que se encontra uma determinada data, considerando-se o domingo comoprimeiro dia e o sábado como o sétimo dia.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```1  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```2",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.maiusculo(texto)\n```1  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```2  \n##### diferencaAnos  \nCalcula a diferença em anos entre duas datas.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```3  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```4  \n##### diferencaDias  \nCalcula a diferença em dias entre duas datas.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Calcula a diferença em dias entre duas datas.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```5  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```6  \n##### diferencaHoras  \nCalcula a diferença em horas entre duas datas.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```7  \n_Alternativa_  \n```bfc-script\nCaracteres.maiusculo(texto)\n```8  \n##### diferencaMeses",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nCaracteres.maiusculo(texto)\n```8  \n##### diferencaMeses  \nCalcula a diferença em meses entre duas datas.  \n```bfc-script\nCaracteres.maiusculo(texto)\n```9  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```0  \n##### diferencaMinutos  \nCalcula a diferença em minutos entre duas datas/hora.  \n```bfc-script\ntexto.maiusculo\n```1  \n_Alternativa_",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.maiusculo\n```1  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```2  \n##### diferencaSegundos  \nCalcula a diferença em segundos entre duas datas/hora  \n```bfc-script\ntexto.maiusculo\n```3  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```4  \n##### ehData  \nVerifica se um texto é uma data válida.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Verifica se um texto é uma data válida.  \n```bfc-script\ntexto.maiusculo\n```5  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```6  \n##### extenso  \nObtem a data por extenso.  \n```bfc-script\ntexto.maiusculo\n```7  \n_Alternativa_  \n```bfc-script\ntexto.maiusculo\n```8  \n##### hoje  \nObtem a data e hora do sistema operacional.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Obtem a data e hora do sistema operacional.  \n```bfc-script\ntexto.maiusculo\n```9  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```00  \n##### hora  \nObtem a hora em que se encontra uma determinada data/hora.  \n```bfc-script\ntexto.capitaliza\n```01  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```02  \n##### mes",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```02  \n##### mes  \nObtem o mês em que se encontra uma determinada data.  \n```bfc-script\ntexto.capitaliza\n```03  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```04  \n##### minuto  \nObtem os minutos referentes a uma determinada data/hora  \n```bfc-script\ntexto.capitaliza\n```05",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```05  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```06  \n##### nomeDiaSemana  \nObtem o nome do dia da semana.  \n```bfc-script\ntexto.capitaliza\n```07  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```08  \n##### nomeMes  \nObtem o nome do mês de uma data.  \n```bfc-script\ntexto.capitaliza\n```09  \n_Alternativa_",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```09  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```10  \n##### periodo  \nCria um período com data inicial e data final.  \n```bfc-script\ntexto.capitaliza\n```11  \n##### removeDias  \nRemove uma quantidade especificada de dias de uma data.  \n```bfc-script\ntexto.capitaliza\n```12  \n_Alternativa_",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```12  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```13  \n##### removeMeses",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Remove uma quantidade especificada de meses de uma data. Caso o dia da data especificada não seja um dia válido para o mês resultante, Ex: 31/12/2011, remove 1 mês, valor inválido para nova data 31/11/2011, a diferença de dias será acrescentada da",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "a diferença de dias será acrescentada da nova data, Ex: 31/12/2011,remove 1 mês fica 01/12/2011.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```14  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```15  \n##### segundo  \nObtem os segundos referentes a uma determinada data/hora.  \n```bfc-script\ntexto.capitaliza\n```16  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```17  \n##### formatar",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```17  \n##### formatar  \nObtem o valor de uma data formatado de acordo com um padrão especificado.  \n```bfc-script\ntexto.capitaliza\n```18  \n_Alternativa_  \n```bfc-script\ntexto.capitaliza\n```19  \nExemplos:  \n```bfc-script\ntexto.capitaliza\n```20  \nPadrões para formatação:",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```20  \nPadrões para formatação:  \nLetra  | Descrição  | Exemplos\n---|---|---\ny  | Ano  | 2009; 09\nM  | Mês do ano  | Julho; Jul; 07\nw  | Semana no ano  | 27\nW  | Semana no mês  | 2\nD  | Dia no ano  | 189\nd  | Dia no mês  | 10",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "D  | Dia no ano  | 189\nd  | Dia no mês  | 10\nF  | Dia da semana no mês  | 2\nE  | Nome do dia da semana  | Segunda-feira, Seg\nu  | Número do dia da semana (1=Segunda.7=Domingo)  | 1\na  | Indicador de AM/PM  | AM\nH  | Hora no dia (0-23)  | 0",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "H  | Hora no dia (0-23)  | 0\nk  | Hora no dia (1-24)  | 24\nK  | Hora no dia (0-11)  | 0\nh  | Hora no dia (1-12)  | 12\nm  | Minuto na hora  | 55\ns  | Segundos no minuto  | 30\nS  | Milissegundo  | 978  \n#### Numeros  \n##### absoluto",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Numeros  \n##### absoluto  \nCalcula o valor absoluto de um número.  \n```bfc-script\ntexto.capitaliza\n```21  \n##### arredonda  \nArredonda um valor.  \n```bfc-script\ntexto.capitaliza\n```22  \n##### coseno  \nCalcula o co-seno de um ângulo.  \n```bfc-script\ntexto.capitaliza\n```23  \n##### decimal",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```23  \n##### decimal  \nConverte o valor de um texto em um número decimal de alta precisão.  \n```bfc-script\ntexto.capitaliza\n```24  \n##### ehNumero  \nVerifica se um texto é um número válido.  \n```bfc-script\ntexto.capitaliza\n```25  \n##### exponencial",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```25  \n##### exponencial  \nObtem o exponencial de um número específico.  \n```bfc-script\ntexto.capitaliza\n```26  \n##### fatorial  \nObtem o fatorial de um número.  \n```bfc-script\ntexto.capitaliza\n```27  \n##### inteiro",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```27  \n##### inteiro  \nConverte o valor de um texto em um número inteiro. Caso o texto represente um número decimal, este será truncado para um inteiro, ou seja, a parte decimal será descartada.  \n```bfc-script\ntexto.capitaliza\n```28  \n##### logaritmo",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```28  \n##### logaritmo  \nInforma o logaritmo natural de um número.  \n```bfc-script\ntexto.capitaliza\n```29  \n##### logaritmo10  \nInforma logaritmo de base 10 de um número.  \n```bfc-script\ntexto.capitaliza\n```30  \n##### maximo  \nObtem o maior valor entre dois números.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Obtem o maior valor entre dois números.  \n```bfc-script\ntexto.capitaliza\n```31  \n##### minimo  \nObtem o menor valor entre dois números.  \n```bfc-script\ntexto.capitaliza\n```32  \n##### numero",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```32  \n##### numero  \nConverte o valor de um texto em um número, retornando o tipo Long para números inteiros e Double para números decimais.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "IMPORTANTE! Esta função NÃO deve ser utilizada para trabalhar com valores monetários. O tipo Double não é adequado para esse fim e vai resultar em imprecisões que ao longo de um cálculo podem alterar de forma significativa o resultado. A função",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "de forma significativa o resultado. A função adequada para este fim é a Numeros.decimal.",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": false
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```33  \n##### pi  \nMultiplica o valor de PI pelo número especificado.  \n```bfc-script\ntexto.capitaliza\n```34  \n##### piso  \nObtem o maior número que é menor ou igual ao número espedificado, sendo este número inteiro.  \n```bfc-script\ntexto.capitaliza\n```35  \n##### raiz",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```35  \n##### raiz  \nCalcula a raiz quadrada de um número.  \n```bfc-script\ntexto.capitaliza\n```36  \n##### randomico  \nObtem um número aleatório entre 1 a um valor limite especificado.  \n```bfc-script\ntexto.capitaliza\n```37  \n##### resto",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```37  \n##### resto  \nRetorna o resto da divisão realizada entre o dividendo e o divisor, que são passados porparâmetro.  \n```bfc-script\ntexto.capitaliza\n```38  \n##### seno  \nCalcula o seno de um ângulo.  \n```bfc-script\ntexto.capitaliza\n```39  \n##### seZero",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```39  \n##### seZero  \nTesta os valores passados como parâmetro e retorna o primeiro diferente de zero.  \n```bfc-script\ntexto.capitaliza\n```40  \n##### tangente  \nCalcula a tangente de um ângulo.  \n```bfc-script\ntexto.capitaliza\n```41  \n##### teto",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```41  \n##### teto  \nObtem o menor número que é maior ou igual ao número espedificado, sendo este número inteiro.  \n```bfc-script\ntexto.capitaliza\n```42  \n##### trunca  \nTrunca um valor de acordo com o número de casas decimais especificadas.  \n```bfc-script\ntexto.capitaliza\n```43",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_padrao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntexto.capitaliza\n```43  \n#### JSON  \n##### ler  \nConverte um json em um mapa  \n```bfc-script\ntexto.capitaliza\n```44  \n##### escrever  \nConverte um objeto em json  \n```bfc-script\ntexto.capitaliza\n```45",
        "metadata": {
            "source": "docs/BFC Doc/API_padrao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Notificações",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": false
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O bfc-script disponibiliza uma API para envio de notificações aos usuários do sistema. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": false
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para criar uma nova notificação deve-se utilizar a função Notificacao.**nova()** :  \n```bfc-script\nmsg1 = Notificacao.nova()\nmsg2 = Notificacao.nova('Seja bem vindo!') //Define a mensagem na inicialização\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nmsg1 = Notificacao.nova()\nmsg2 = Notificacao.nova('Seja bem vindo!') //Define a mensagem na inicialização\n```  \nUma mensagem contem diversas caracteristicas que serão apresentadas a seguir, uma vez configurada a mensagem, o envio é realizado através da função **enviar()** da mensagem.  \n```bfc-script\nmsg = Notificacao.nova()\n//configurações da mensagem\nmsg.enviar()\n```  \n### Mensagem  \n#### para(usuarios)",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Mensagem  \n#### para(usuarios)  \nAdiciona um usuário como destinatário da notificação. É possível adicionar vários usuários:  \n```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para('joao.silva', 'maria.silva')\n.enviar()\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para('joao.silva', 'maria.silva')\n.enviar()\n```  \nTambém é possível adicionar o usuário logado como destinatário da notificação usando o identificador `usuario.id`:  \n```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para(usuario.id)\n.enviar()\n```  \nMais um exemplo, usando o usuário logado e outros usuários:  \n```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para(usuario.id, 'joao.silva', 'maria.silva')\n.enviar()\n```  \n#### mensagem(mensagem)",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para(usuario.id, 'joao.silva', 'maria.silva')\n.enviar()\n```  \n#### mensagem(mensagem)  \nDefine a mensagem a ser enviada pela notificação  \n#### link(href)  \nDefine o link a ser enviado pela notificação  \n#### link(href, titulo)  \nDefine o link com título a ser enviado pela notificação",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### link(href, titulo, label)  \nDefine o link, titulo e label a ser enviado pela notificação  \n#### enviar()  \nRealiza o envio da notificação aos destinatários.  \n### Exemplos  \n```bfc-script\nNotificacao.nova('Seja bem vindo!')\n.para('usuario.betha', 'suite.betha')\n.enviar()\n```  \n```bfc-script\nNotificacao.nova()\n.para('suite.betha')\n.mensagem('Obrigado!')\n.enviar()\n```  \n## API de Mensagens",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O bfc-script disponibiliza uma API para envio de mensagens aos usuários do sistema. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Eventos** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": false
    },
    {
        "document": "API_mensagens",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A API possibilita o envio de quatro tipos de mensagens: erro, aviso, informação e sucesso, conforme o exemplo abaixo::  \n```bfc-script\nMensagens.erro('Mensagem de erro')\nMensagens.aviso('Mensagem de aviso')\nMensagens.info('Mensagem de informação')\nMensagens.sucesso('Mensagem de sucesso')\n```  \nÉ possível ainda adicionar mensagens parametrizadas:  \n```bfc-script\nMensagens.erro('Mensagem de %s %s', 'erro', 'parametrizada')\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_mensagens.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de SOAP  \nO bfc-script disponibiliza uma API para consumo de serviços web no padrão SOAP. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A API conta com algumas representações básicas de funcionamento sendo elas o **Serviço** , a **Mensagem** e a **Resposta**. O **Serviço** trata-se de um webservice SOAP a ser consumido, cada interação com esse webservice é realizado através de uma",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "com esse webservice é realizado através de uma **Mensagem**. O produto desta mensagem quando executada é uma **Resposta** , essa resposta pode ser transformada em vários tipos de saídas, sendo elas um Leitor de XML da API de arquivo, Uma fonte de",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "um Leitor de XML da API de arquivo, Uma fonte de arquivo para utilização em conjunto com outras APIs (E-mail, Arquivos), O conteúdo XML da resposta em sí ou simplesmente a impressão da resposta no console do script.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Serviço  \nPara criar um novo serviço SOAP à ser consumido deve-se utilizar a função Soap.**servico** , as opções disponíveis para criação e configurações dos serviços são:  \n#### Soap.servico(url)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Soap.servico(url)  \nCria um novo servico com base na URL informada por parâmetro.  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\n```  \n#### Soap.servico(url, namespace, prefixo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Soap.servico(url, namespace, prefixo)  \nCria um novo serviço com base na URL informada por parâmetro. O namespace e prefixo (target namespace) informados serão utilizados como padrão na montagem da mensagem e manipulação dos elementos.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```  \n#### Soap.servico(url, namespace, prefixo, usuario, senha)  \nEsta opção dá suporte a criação de serviços que utilizem mecanismos de autenticação HTTP básico permitindo informar também o usuário e senha de conexão como parâmetros.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Soap.criarNamespace(namespace, prefixo)  \nCria uma representação de um namespace e prefixo para ser reutilizado nas funções da API, desta forma não é necessário informar namespace e prefixo a cada função.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Os valores podem ser acessados através das funções: **namespace()** e **prefixo()** da representação criada.  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```  \n#### cabecalho(nome, valor)  \nAdiciona um cabeçalho(header) HTTP na requisição SOAP do serviço.  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```  \n#### cookie(nome, valor, path)  \nAdiciona um cookie na requisição SOAP do serviço.  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```  \n**detalhe:** path é opcional e pode ser omitido.  \n#### mensagem()  \nCria uma nova mensagem (envelope) à ser enviado ao serviço.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### mensagem(namespace, prefixo)  \nCria uma nova mensagem (envelope) à ser enviado ao serviço sobrescrevendo o namespace e prefixo padrão informados na criação do serviço.  \n#### mensagem([namespace](index.html#apiSoapServicoCriarNamespace))",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Cria uma nova mensagem (envelope) à ser enviado ao serviço sobrescrevendo o namespace e prefixo padrão informados na criação do serviço. Esta opção deve ser utilizada com namespaces criados com a função",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "ser utilizada com namespaces criados com a função [Soap.criarNamespace](index.html#apiSoapServicoCriarNamespace).",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### tempoLimite(valor)  \nDefine o tempo limite para a execução das requisições. O valor deve ser informado em milissegundos.  \n### Mensagem",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A representação de uma mensagem é composta basicamente de um cabeçalho e de um corpo. Ambos podem conter diversos [elementos](index.html#apiSoapMensagemElemento) que por sua vez podem possuir outros [elementos](index.html#apiSoapMensagemElemento).",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "[elementos](index.html#apiSoapMensagemElemento). Esta estrutura de árvore é baseada no padrão XML e é através dela que os parâmetros de entrada da funcionalidade do webservice são informados. Em resumo, uma mensagem destina-se à execução de um",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "resumo, uma mensagem destina-se à execução de um método/função de um serviço SOAP.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "As opções disponíveis para montagem da mensagem são:  \n#### namespace(namespace, prefixo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### namespace(namespace, prefixo)  \nAdiciona um namespace a mensagem. Este namespace será adicionado ao envelope SOAP da mensagem e poderá ser utilizado na declaração dos [elementos](index.html#apiSoapMensagemElemento).",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### namespace([namespace](index.html#apiSoapServicoCriarNamespace))",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um namespace a mensagem. Este namespace será adicionado ao envelope SOAP da mensagem e poderá ser utilizado na declaração dos [elementos](index.html#apiSoapMensagemElemento).  \n#### namespaces()",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### namespaces()  \nRetorna uma lista com os [namespaces](index.html#apiSoapServicoCriarNamespace) declarados na mensagem.  \n#### namespacePadrao()  \nRetorna o [namespaces](index.html#apiSoapServicoCriarNamespace) definido como padrão da mensagem.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### corpo()  \nRetorna o [elemento](index.html#apiSoapMensagemElemento) do corpo da mensagem.  \n#### corpo(conteudo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### corpo(conteudo)  \nEscreve o conteúdo XML no corpo da mensagem. É importante lembrar que o conteúdo deverá ser um XML válido e utilizar os namespaces declarados na mensagem/corpo.  \n```bfc-script\nservico.mensagem().corpo('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```  \n#### corpo(arquivo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.mensagem().corpo('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```  \n#### corpo(arquivo)  \nEscreve o conteúdo XML no corpo da mensagem com base em uma fonte de arquivo. É importante lembrar que o conteúdo do arquivo deverá ser um XML válido e utilizar os namespaces declarados na mensagem/corpo.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nxml = Arquivo.novo('msg.xml', 'xml')\nxml.fechar()\n3.\nservico.mensagem().corpo(xml)\n```  \n#### cabecalho()  \nRetorna o [elemento](index.html#apiSoapMensagemElemento) do cabeçalho da mensagem.  \n#### cabecalho(conteudo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cabecalho(conteudo)  \nEscreve o conteúdo XML no cabeçalho da mensagem. É importante lembrar que o conteúdo deverá ser um XML válido e utilizar os namespaces declarados na mensagem/corpo.  \n```bfc-script\nservico.mensagem().cabecalho('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```  \n#### cabecalho(arquivo)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cabecalho(arquivo)  \nEscreve o conteúdo XML no cabecalho da mensagem com base em uma fonte de arquivo. É importante lembrar que o conteúdo do arquivo deverá ser um XML válido e utilizar os namespaces declarados na mensagem/corpo.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nxml = Arquivo.novo('msg.xml', 'xml')\nxml.fechar()\n3.\nservico.mensagem().cabecalho(xml)\n```  \n#### operacao(operacao)  \nDefine a operação/método/função a ser executada no webservice. Este valor será informado no cabeçalho HTTP SOAPAction da mensagem.  \n#### executar()",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### executar()  \nExecuta a chamada ao método/função do serviço SOAP e retorna uma representação da [resposta](index.html#apiSoapResposta).  \n#### executar(operacao)",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Executa a chamada ao método/função do serviço SOAP e retorna uma representação da [resposta](index.html#apiSoapResposta). Esta opção permite que o a operação à ser executada seja informada diretamente pela função executar() sem a necessidade de",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "pela função executar() sem a necessidade de pré-definir o valor através da função operacao().",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### requisicao()  \nRetorna uma representação para leitura da requisição SOAP realizada. Esta leitor de mensagem contém as mesmas funcionalidades da [resposta](index.html#apiSoapResposta) e poderá ser utilizado para fins de depuração.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Elementos  \nUm elemento pode ser considerado como uma representação baseada em árvore para descrever uma informação na mensagem. Os elementos de uma mensagem (corpo, cabeçalho) SOAP utilizam o padrão XML.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "As opções disponíveis para manipulação dos elementos são:  \n**nome()**  \nRetorna o nome do elemento.  \n**namespace()**  \nRetorna o [namespace](index.html#apiSoapServicoCriarNamespace) do elemento.  \n**adicionarElemento(nome)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarElemento(nome)**  \nAdiciona/cria um novo elemento. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.  \n```bfc-script\nelemEnderecos = servico.mensagem()\n.corpo()\n.adicionarElemento('endereco')\n4.\nelemEnderecos.adicionarElemento('residencial')\nelemEnderecos.adicionarElemento('comercial')\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nelemEnderecos = servico.mensagem()\n.corpo()\n.adicionarElemento('endereco')\n4.\nelemEnderecos.adicionarElemento('residencial')\nelemEnderecos.adicionarElemento('comercial')\n```  \nO elemento _elemEnderecos_ irá produzir o seguinte XML na mensagem:  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```0  \n**adicionarElemento(nome, namespace, prefixo)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona/cria um novo elemento informando também o namespace e prefixo de declaração do elemento. É importante lembrar que o namespace utilizado deve estar declarado na mensagem ou elemento pai. O retorno desta função é a representação do novo",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarElemento(nome,[namespace](index.html#apiSoapServicoCriarNamespace))**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona/cria um novo elemento informando também o namespace de declaração do elemento. É importante lembrar que o namespace utilizado deve estar declarado na mensagem ou elemento pai. O retorno desta função é a representação do novo elemento criado",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarTexto(texto)**  \nAdiciona conteúdo do tipo texto à um elemento. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```1  \nproduzirá:",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```1  \nproduzirá:  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```2  \n**adicionarElementoTexto(nome, texto)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarElementoTexto(nome, texto)**  \nAdiciona um novo elemento com conteúdo do tipo texto. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```3  \nproduzirá:  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```2  \n**adicionarElementoTexto(nome, texto, namespace, prefixo)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um novo elemento com conteúdo do tipo texto indicando também o namespace e prefixo que o elemento está vinculado. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarElementoTexto(nome, texto,[namespace](index.html#apiSoapServicoCriarNamespace))**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um novo elemento com conteúdo do tipo texto indicando também o namespace e prefixo que o elemento está vinculado. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarAtributo(nome, valor)**  \nAdiciona um novo atributo ao elemento atual. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```5  \nproduzirá:",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```5  \nproduzirá:  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```6  \n**adicionarAtributo(nome, valor, namespace, prefixo)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um novo atributo ao elemento atual indicando também o namespace e prefixo ao qual o atributo está vinculado. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarAtributo(nome, valor,[namespace](index.html#apiSoapServicoCriarNamespace))**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um novo atributo ao elemento atual indicando também o namespace e prefixo ao qual o atributo está vinculado. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarNamespace(namespace, prefixo)**  \nAdiciona a declaração de um namespace ao elemento atual. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**adicionarNamespace([namespace](index.html#apiSoapServicoCriarNamespace))**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona a declaração de um namespace ao elemento atual. O retorno desta função é a representação do novo elemento criado e poderá ser utilizado para adicionar elementos filhos caso necessário.  \n**elementoAnterior()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**elementoAnterior()**  \nUtilizado para navegação entre os elementos criados de uma mesma família. Esta opção contém a representação do elemento pai do elemento corrente.  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```7\n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```8  \n**contemElementoAnterior()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```8  \n**contemElementoAnterior()**  \nIndica se o elemento atual possui um próximo elemento.  \n**proximoElemento()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**proximoElemento()**  \nUtilizado para navegação entre os elementos criados de uma mesma família. Esta opção contém a representação do primeiro elemento filho do item corrente.  \n**contemProximoElemento()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**contemProximoElemento()**  \nIndica se o elemento atual possui um elemento anterior.  \n```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```9  \n#### Métodos",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nSoap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx',\n'http://ws.cdyne.com/',\n'ws')\n```9  \n#### Métodos  \nMétodos são representações auxiliares para simplificar a montagem dos elementos da mensagem nos casos em que o webservice contém apenas parâmetros simples como entrada.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**_As opções disponíveis para criação de métodos a partir da mensagem são:_**  \n**metodo(operacao)**  \nCria um novo método para a operação/função informado no parâmetro.  \n**metodo(operacao, namespace, prefixo)**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**metodo(operacao, namespace, prefixo)**  \nCria um novo método utilizando a operação, namespace e prefixo informados nos parâmetros.  \n**metodo(operacao,[namespace](index.html#apiSoapServicoCriarNamespace))**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Cria um novo método utilizando a operação e [namespaces](index.html#apiSoapServicoCriarNamespace) informados nos parâmetros.  \n**Exemplo:**  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```0  \n**_As funções disponíveis na representação de métodos são:_**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**parametro(nome, valor)** Adiciona um parâmetro de entrada ao método atual.  \n**parametro(nome, valor, namespace)** Adiciona um parâmetro de entrada ao método atual utilizando o namespace informado.  \n**operacao()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**operacao()**  \nRetorna a operação do método atual.  \n**namespace()**  \nRetorna o namespace do método atual.  \n**elemento()**  \nRetorna o [elemento](index.html#apiSoapMensagemElemento) que representa o método atual.  \n**requisicao()**",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**requisicao()**  \nRetorna uma representação para leitura da requisição SOAP realizada. Esta leitor de mensagem contém as mesmas funcionalidades da [resposta](index.html#apiSoapResposta) e poderá ser utilizado para fins de depuração.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**executar()**  \nExecuta a chamada do método atual e retorna uma representação da [resposta](index.html#apiSoapResposta).  \n**mensagem()**  \nRetorna a representação da mensagem em que o método foi criado.  \n**Exemplo:**  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```1",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**Exemplo:**  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```1  \n### Resposta  \nUma mensagem quando executada tem como retorno uma representação de resposta. Esta resposta pode ser processada/lida de maneiras distintas conforme necessidade.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "As opções de processamento disponíveis são:  \n#### imprimir()  \nImprime o conteúdo XML da resposta no console do editor de scripts.  \n#### conteudo()  \nRetorna o conteúdo XML da resposta no formato caracter.  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```2  \n#### arquivo()",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```2  \n#### arquivo()  \nRetorna uma fonte de arquivo que contém o conteúdo da resposta. Esta opção deverá ser utilizada em conjunto com as demais APIs da engine de scripts.  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```3  \n#### xml()",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```3  \n#### xml()  \nRetorna um [leitor de arquivos XML da API de Arquivos](index.html#apiArquivosImplementacoesXml) para o conteúdo da resposta.  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```4  \n#### anexos()",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```4  \n#### anexos()  \nRetorna uma lista com os anexos presentes na mensagem de retorno do serviço.  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```5  \n#### anexo(id)  \nLocaliza e retorna um anexo de acordo com o seu id  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```6  \n### Base64",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Base64 é um método para codificação de dados para transferência na Internet. É utilizado frequentemente para transmitir dados binários por meios de transmissão que lidam apenas com texto, como por exemplo para enviar arquivos anexos por e-mail. Uma",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "para enviar arquivos anexos por e-mail. Uma abordagem muito comum, inclusive praticada por alguns tribunais de contas, é o uso do Base64 para envio de arquivos binários em webservices SOAP.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Segue um exemplo de como utilizar a API provida no BFCScript para este propósito:  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```7  \nÉ possível codificar um arquivo zip gerado em um script:  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```8  \nOu ainda codificar um arquivo recebido por parâmetro:  \n```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```9",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnamespace = Soap.criarNamespace('http://ws.cdyne.com/', 'ws')\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx', namespacePadrao)\n3.\nimprimir namespace.namespace()\nimprimir namespace.prefixo()\n```9  \nÉ possível ainda definir o encoding para codificação e/ou decodificação (o encoding padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```0  \nTambém é possível decodificar para um arquivo de forma que o mesmo possa ser utilizado na API de Arquivos:",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```1  \nA função BaseCodec está disponível ao usuário final apenas através da **Ferramenta de Scripts**.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**Atenção** : existe um limite cumulativo de **30MB** para codificar/decodificar conteúdo Base64 durante uma execução de script. A soma de todo o conteúdo processado deve ficar sempre abaixo deste limite. Lembrando que este limite incinde sobre a",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "limite. Lembrando que este limite incinde sobre a saída gerada pela API, e não sobre as entradas utilizadas.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Contornando a limitação cumulativa",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Caso seja necessário codificar ou decodificar diversos conteúdos e esteja sendo esbarrado no limite cumulativo, pode-se utilizar métodos que não retornam como o resposta o conteúdo (não alocando no contexto global), e sim disponibilizam ele dentro",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "contexto global), e sim disponibilizam ele dentro de uma closure, que acaba liberando a memória alocada mais rapidamente:",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```2  \nFazendo o uso dessas chamadas, o limite passa a ser de 30mb de forma individual e não descontando do limite cumulativo global.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**É recomendado que não se atríbua essa variável interna para um contexto maior, permitindo assim que a memória alocada seja liberada**  \n### Hash",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Uma função de hash pode ser utilizada para verificar a integridade de arquivos, uma vez que uma hash é gerada com base em um texto ou arquivo, não existe uma maneira de fazer o caminho contrário. Uma abordagem muito comum, inclusive praticada por",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "abordagem muito comum, inclusive praticada por alguns tribunais de contas, é o uso de verificações de integridade de arquivos binários enviados em webservices SOAP.",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": false
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Existem alguns algoritmos popularmente utilizados para gerar uma hash de algo, são eles MD5, SHA-1, SHA-256 e SHA-512:  \n**padraoMD5()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**padraoMD5()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```3  \nQuando utilizado um texto, é possível definir o charset para codificação (o charset padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```4",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```4  \nQuando utilizado um arquivo, não é possível definir o charset para codificação, o charset utilizado é o do arquivo:  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```5  \n**padraoSHA1()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```6",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**padraoSHA1()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```6  \nQuando utilizado um texto, é possível definir o charset para codificação (o charset padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```7  \nQuando utilizado um arquivo, não é possível definir o charset para codificação, o charset utilizado é o do arquivo:  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```8  \n**padraoSHA256()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```9",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**padraoSHA256()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cabecalho('Authorization','Bearer 239e3d8e-1e93-4f2b-beff-c430103b9287')\n```9  \nQuando utilizado um texto, é possível definir o charset para codificação (o charset padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```0  \nQuando utilizado um arquivo, não é possível definir o charset para codificação, o charset utilizado é o do arquivo:  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```1\n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```2",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```1\n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```2  \nQuando utilizado um texto, é possível definir o charset para codificação (o charset padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```3  \nQuando utilizado um arquivo, não é possível definir o charset para codificação, o charset utilizado é o do arquivo:  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```4  \n**padraoHex()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```4  \n**padraoHex()**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```5  \nQuando utilizado um texto, é possível definir o charset para codificação (o charset padrão é UTF-8):  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```6",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```6  \nQuando utilizado um arquivo, não é possível definir o charset para codificação, o charset utilizado é o do arquivo:  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```7  \n**Exemplo 1:**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```8  \n**Exemplo 2:**  \n```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```9  \n**Exemplo 3:**  \n```bfc-script\nservico.mensagem().corpo('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_soap",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Soap.servico('http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx')\nservico.cookie('nome', 'valor', 'path')\n```9  \n**Exemplo 3:**  \n```bfc-script\nservico.mensagem().corpo('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```0  \n**Exemplo 4:**  \nArmazenar o retorno em formato de anexo de um serviço.  \n```bfc-script\nservico.mensagem().corpo('<ws:VerifyEmail><ws:email>teste@test.com</ws:email><ws:LicenseKey>example</ws:LicenseKey></ws:VerifyEmail>')\n```1",
        "metadata": {
            "source": "docs/BFC Doc/API_soap.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Scripts",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O bfc-script disponibiliza uma API que provê suporte à chamada entre scripts. Esta funcionalidade permite que uma lógica comum seja reutilizada por diversos scripts e está disponivel ao usuário final apenas através da **Ferramenta de Scripts**.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para que seja possível invocar um script através da API é necessário configurar o identificador único do script à ser executado.  \n### Executando scripts",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Executando scripts  \nA execução de um script é realizada utilizando a palavra reservada **Scripts** , seguida do identificador e método de execução:  \n_Scripts_.**identificador**._executar(parametros)_  \n```bfc-script\nScripts.calculos.somar.executar(parametros)\nScripts.dubai.consultas.funcionarios.executar(parametros)\n```  \n#### identificador",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nScripts.calculos.somar.executar(parametros)\nScripts.dubai.consultas.funcionarios.executar(parametros)\n```  \n#### identificador  \nIdentificador único do script.  \n#### executar(parametros)  \nFunção responsável pela execução do script.  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```  \n#### variaveis(Map)",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```  \n#### variaveis(Map)  \nFunção responsável por enviar variáveis para outro script sem a necessidade de ter parâmetros no script que recebe essas variáveis.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O script de exemplo tem dois parâmetros do tipo arquivo, com os nomes arquivo e arquivo2, esses arquivos são enviados para o segundo script identificado por scriptb:  \n```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```  \nNo script que recebe as variáveis, os valores estão disponíveis da seguinte maneira:  \n```bfc-script\nResultado.arquivo(variaveis.arquivo1)\nResultado.arquivo(variaveis.arquivo2)\n3.\nimprimir variaveis.val3\n```  \nO scriptb não precisa ter nenhum parâmetro para receber as variáveis e qualquer tipo pode ser passado por variaveis().",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Outro exemplo seria um script principal que gera um arquivo csv com valores obtidos em execuções de outros três scripts:  \nScript principal:  \n```bfc-script\n//Escrita\ncsv = Arquivo.novo('teste.csv', 'csv', [delimitador:';'])\n3.\ncsv.escrever('ID')\ncsv.escrever('NOME')\ncsv.escrever('SALARIO')\n7.\nScripts.geraarquivo.funcionarios1.variaveis(arquivo:csv).executar()\n9.\n10.\ngeraArquivo = {col1, col2, col3 ->\ncsv.novaLinha()\n13.\ncsv.escrever(col1)\ncsv.escrever(col2)\ncsv.escrever(col3)\n}\n18.\nScripts.geraarquivo.funcionarios2.variaveis(retorno:geraArquivo).executar()\n20.\nretorno = Scripts.componente3.executar()\n22.\nimprimir retorno.variaveis.geraArquivo2();  // imprime o valor teste2 no log de execução do script principal\n24.\nretorno.variaveis.geraArquivo(csv)\n26.\nResultado.arquivo(csv)\n```  \nScript com o identificador geraarquivo.funcionarios1:  \n```bfc-script\ncsv = variaveis.arquivo\ncriterio = Criterio.onde('nome').igual('Paulo Henrique')\n3.\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n5.\npercorrer(dadosFuncionarios.busca(campos:\"nome, id, salario\", criterio: criterio)){\ncsv.novaLinha()\ncsv.escrever(item.id)\ncsv.escrever(item.nome)\ncsv.escrever(item.salario)\n}\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ncsv = variaveis.arquivo\ncriterio = Criterio.onde('nome').igual('Paulo Henrique')\n3.\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n5.\npercorrer(dadosFuncionarios.busca(campos:\"nome, id, salario\", criterio: criterio)){\ncsv.novaLinha()\ncsv.escrever(item.id)\ncsv.escrever(item.nome)\ncsv.escrever(item.salario)\n}\n```  \nScript com o identificador geraarquivo.funcionarios2:  \n```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\ncriterio = Criterio.onde('nome').igual('Wellington')\n3.\nid = '';\nnome = '';\nsalario = '';\n7.\npercorrer(dadosFuncionarios.busca(campos:\"nome, id, salario\", criterio: criterio)){\nid = item.id\nnome = item.nome\nsalario = item.salario\n}\n13.\nvariaveis.retorno(id, nome, salario)\n```  \nScript com o identificador componente3:  \n```bfc-script\ngeraArquivo2 = {\nretornar \"teste2\"\n}\n4.\ngeraArquivo = {csv ->\ncsv.novaLinha()\n7.\ncsv.escrever('Valor 31')\ncsv.escrever('Valor 32')\ncsv.escrever('Valor 33')\n11.\n}\n```  \nAo executar o script principal o arquivo csv é gerado.  \n### Retorno dos scripts",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Retorno dos scripts  \nA execução de um script através da API sempre irá produzir um resultado, Este resultado é representado da seguinte forma:  \n```bfc-script\nresultado = Scripts.somar.executar([ p1 : 100, p2 : 200])\n```  \nAs opções disponíveis em um resultado são:  \n#### valor",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### valor  \nRecupera o valor retornado pelo script executado.  \n```bfc-script\nimprimir resultado.valor()\n```  \n#### vazio  \nVerifica se o script invocado retornou algum resultado.  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```0  \n#### variavel(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```0  \n#### variavel(nome)  \nRecupera o valor de uma variável declarada no script invocado.  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```1  \nNote que a variável _log_ foi declarada no conteúdo do script somar:  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```2  \n#### retornar",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```2  \n#### retornar  \nO retorno de um script é realizado utilizando o comando _**retornar**_:  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```3  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```4  \n### Executando scripts em lote",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A execução de scripts em lote pode ser realizada através da criação de um script centralizador. Este script será responsável por orquestrar a execução dos demais scripts obedecendo a ordem cronológica de execução. Exemplo:  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```5  \n### Componentes  \n**Quando utilizar componentes?**",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "**Quando utilizar componentes?**  \nQuando para resolver uma dada situação seja mais indicado fragmentar o script, seja por uma questão de organização ou de praticidade em ter funções com finalidades específicas devidamente separadas.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Por exemplo: Consideremos que um dado Tribunal de Contas exige bimestralmente a informação de todos os fornecedores de uma entidade via Web Service. Neste caso, poderiam existir os seguintes recursos:",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Script principal, onde recebe os parâmetros para gerar as informações e enviá-las ao Tribunal de Contas;\n* Componente para identificar todos os fornecedores passíveis de envio ao Tribunal de Contas;",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Componente para gerar o arquivo a ser enviado ao Tribunal de Contas;\n* Componente para enviar o arquivo ao Tribunal de Contas via Web Service;\n**Por que utilizar componentes?**  \nSão algumas vantagens na utilização dos componentes:",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Melhor performance na execução do script: Por conta do recurso Exportar e Importar e também porque os componentes são executados exclusivamente a partir de um script que o invoca;",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Organização de código: Por meio da fragmentação de código orientada ao objetivo fim do componente;",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Privacidade de variáveis e closures (funções): Num componente é possível declarar variáveis e closures localmente, e então escolher quais serão expostos para quando o componente for importado por outro script;",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Reutilização de código: Pode ser utilizado o mesmo componente em mais de um script;\n#### Exemplos de utilização:  \n**Exemplo 1:** Este exemplo demonstra um componente que abstrai uma API REST.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Segue o código de um **componente** cujo identificador foi denominado _restapi_ e que será chamado pelo **script pai** :  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```6",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O comando **exportar** é utilizado para definir quais recursos serão expostos pelo componente. Repare que as declarações que não foram exportadas permanecem privadas ao componente, permitindo assim uma modelagem mais robusta de funcionalidades",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "uma modelagem mais robusta de funcionalidades comuns a vários scripts.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Segue o código do **script pai** que chama o componente acima:  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A importação dos recursos de um componente é realizada utilizando a palavra reservada **Scripts** , seguido do identificador e o método de importação. O resultado é atribuído a uma variável, a partir da qual os recursos importados podem ser",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "a partir da qual os recursos importados podem ser acessados.",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": false
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Alternativamente, pode-se utilizar a palavra reservada **importar**, passando como parâmetro o identificador do componente, no caso, fica assim:  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```8  \n**Exemplo 2:** Este exemplo trata de múltiplos componentes para um único Script Pai:",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Existem 3 componentes:  \n* Que simula uma calculadora;\n* Que executa um contador;\n* Que gera um log;\n_Componente 1: identificador ped.calculadora_  \n```bfc-script\nparametros = [ p1 : 100, p2 : 200]\n2.\nScripts.somar.executar(parametros)\n```9  \n_Componente 2: identificador ped.contador_  \n```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_scripts",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```0  \n_Componente 3: identificador ped.log_  \n```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```1  \n_Finalmente, o**Script Pai** :_  \n```bfc-script\narquivos = [arquivo1: parametros.arquivo.valor, arquivo2: parametros.arquivo2.valor, val3:'teste teste 123']\n2.\nScripts.scriptb.variaveis(arquivos).executar();\n```2",
        "metadata": {
            "source": "docs/BFC Doc/API_scripts.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de E-mail  \nO bfc-script disponibiliza uma API para envio de mensagens de e-mails. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para criar uma nova mensagem de e-mail a ser enviada deve-se utilizar a função Email.**novo()** :  \n```bfc-script\nmsg = Email.novo()\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nmsg = Email.novo()\n```  \nUma mensagem contem diversas caracteristicas que serão apresentadas a seguir, uma vez configurada a mensagem, o envio é realizado através da função **enviar()** da mensagem.  \n```bfc-script\nmsg = Email.novo()\n//configurações da mensagem\nmsg.enviar()\n```  \n### Mensagem  \n#### de(email)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nmsg = Email.novo()\n//configurações da mensagem\nmsg.enviar()\n```  \n### Mensagem  \n#### de(email)  \nDefine o email do remetente da mensagem  \n#### de(email, nome)  \nDefine o email e nome do remetente da mensagem  \n#### para(email)  \nAdiciona um email de destinatário na mensagem",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um email de destinatário na mensagem  \n#### para(email, nome)  \nAdiciona um email e nome de destinatário na mensagem  \n#### copiaPara(email)  \nAdiciona um email de cópia na mensagem  \n#### copiaPara(email, nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### copiaPara(email, nome)  \nAdiciona um email e nome de cópia na mensagem  \n#### copiaOcultaPara(email)  \nAdiciona um email de cópia oculta na mensagem  \n#### copiaOcultaPara(email, nome)  \nAdiciona um email e nome de cópia oculta na mensagem",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### responderPara(email)  \nAdiciona um email no qual a mensagem deverá ser respondia pelos destinatários  \n#### responderPara(email, nome)  \nAdiciona um email e nome no qual a mensagem deverá ser respondia pelos destinatários",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### mensagem(mensagem)  \nDefine o conteúdo da mensagem  \n#### mensagemHtml(mensagem)  \nDefine o conteúdo da mensagem como HTML  \n#### assunto(assunto)  \nDefine o assunto da mensagem  \n#### cabecalho(nome, valor)  \nAdiciona um cabecalho no e-mail",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um cabecalho no e-mail  \n#### autenticacao([usuario, senha, porta, host])  \nAutentica o envio do email. Exemplo de uso:  \n.autenticacao([ usuario: joao, senha: joao, porta: 587, host: smtp.live.com])  \n#### enviar()",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### enviar()  \nEnvia a mensagem de e-mail  \n### Anexos",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Anexos  \nA API conta com 2 tipos de anexos disponíveis, sendo um baseado em fonte de arquivos e outro em URL. Exemplos de fonte de arquivos são os parâmetros do script do tipo Arquivo e artefatos gerados pela API de arquivos.",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Criando anexos:",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A criação de anexos pode ser realizada através de funções específicas da API ou de forma simplificada pela mensagem. Anexos criados pelas funções da API devem ser manualmente adicionados à mensagem. Por motivo de performance, caso o mesmo anexo do",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Por motivo de performance, caso o mesmo anexo do tipo Arquivo tenha que ser enviado para vários destinatários em mensagens diferentes, este deverá ser criado pela API uma única vez no processo.",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Funções de anexo da API  \n##### Email.criarAnexoUrl()  \nCria um novo anexo do tipo URL.  \n##### Email.criarAnexoUrl(url)  \nCria um novo anexo do tipo URL informando o endereço.  \n##### Email.criarAnexoUrl(url, nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### Email.criarAnexoUrl(url, nome)  \nCria um novo anexo do tipo URL informando o endereço e o nome a ser utilizado na mensagem.  \n##### Email.criarAnexoArquivo()  \nCria um novo anexo do tipo arquivo.  \n##### Email.criarAnexoArquivo(arquivo)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### Email.criarAnexoArquivo(arquivo)  \nCria um anexo do tipo arquivo com base em uma fonte de arquivos.  \n```bfc-script\ncsv = Arquivo.novo('teste.csv', 'csv')\ncsv.escrever('Valor')\ncsv.fechar()\n4.\n//Arquivo criado pela API de arquivos\nanexoArquivo = Email.criarAnexoArquivo(csv)\n7.\n//Parâmetro do script tipo Arquivo\nanexoParametro = Email.criarAnexoArquivo(parametros.xml.valor)\n10.\nEmail.novo()\n.anexar(anexoArquivo)\n.anexar(anexoParametro)\n14.\n##### Email.criarAnexoArquivo(arquivo, nome)\n```  \nCria um anexo do tipo arquivo com base em uma fonte de arquivos. O nome do anexo será o mesmo informado no parâmetro nome.",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Propriedades dos anexos  \n##### nome(nome)  \nNome do anexo  \n##### descricao(descricao)  \nDescrição do anexo  \n##### dispostoParaVisualizacao()  \nDefine a disposição do anexo para visualização INLINE no corpo do e-mail.",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### dispostoComoAnexo()  \nDefine a disposição do anexo como ATTACHMENT (arquivo anexado).  \n##### incorporado()",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### incorporado()  \nDefine o anexo como incorporado. Esta opção irá gerar um CID com base no nome do anexo e poderá ser utilizado no corpo da mensagem para referenciar o anexo.  \n##### naoIncorporado()",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### naoIncorporado()  \nDefine o anexo como não incorporado. Por padrão todos os anexos criados não são incorporados.  \n##### url(url)  \nDefine a url para anexos do tipo URL.  \n##### arquivo(arquivo)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### arquivo(arquivo)  \nDefine a fonte do arquivo para anexos do tipo Arquivo.  \n#### Funções de anexo da Mensagem  \n##### anexar(anexo)  \nAdiciona um anexo criado a partir das funções Email.criarAnexoXX() à mensagem  \n```bfc-script\nanexo = Email.criarAnexoUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\nmsg.anexar(msg)\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nanexo = Email.criarAnexoUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\nmsg.anexar(msg)\n```  \n##### anexarArquivo(origem)  \nAdiciona um anexo à mensagem com base em uma fonte de arquivo. Exemplos de fontes são o valor de um parâmetro do script do tipo arquivo e um arquivo criado pela API de arquivos.  \n```bfc-script\ncsv = Arquivo.novo('teste.csv', 'csv')\ncsv.escrever('Valor')\ncsv.fechar()\n4.\n//Arquivo criado pela API de arquivos\nmsg.anexarArquivo(csv)\n7.\n//Parâmetro do script tipo Arquivo\nmsg.anexarArquivo(parametros.xml.valor)\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ncsv = Arquivo.novo('teste.csv', 'csv')\ncsv.escrever('Valor')\ncsv.fechar()\n4.\n//Arquivo criado pela API de arquivos\nmsg.anexarArquivo(csv)\n7.\n//Parâmetro do script tipo Arquivo\nmsg.anexarArquivo(parametros.xml.valor)\n```  \n##### anexarArquivo(origem, nome)  \nAdiciona um anexo à mensagem com base em uma fonte de arquivo. O nome do anexo na mensagem será o mesmo informado no parâmetro nome.  \n##### anexarArquivo(anexoArquivo)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### anexarArquivo(anexoArquivo)  \nAdiciona um anexo criado a partir da função Email.criarAnexoArquivo à mensagem  \n##### anexarUrl(url)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### anexarUrl(url)  \nAdiciona um anexo à mensagem com base em uma URL. O download do anexo será realizado e adicionado a mensagem.  \n##### anexarUrl(url, nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": false
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### anexarUrl(url, nome)  \nAdiciona um anexo à mensagem com base em uma URL. O download do anexo será realizado e um anexo com o nome parametrizado será adicionado.  \n```bfc-script\nmsg.anexarUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\n```  \n##### anexarUrl(anexoUrl)",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nmsg.anexarUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\n```  \n##### anexarUrl(anexoUrl)  \nAdiciona um anexo criado a partir da função Email.criarAnexoUrl à mensagem  \n### Exemplos  \n#### Envio de e-mail autenticado  \n```bfc-script\nEmail.novo()\n.autenticacao([ usuario: 'usuario', senha: 'senha', porta: 'porta', host: 'smtp.live.com' ])\n.de('betha@betha.com.br','Betha Sistemas')\npara(destinatario, 'Destinatário')\n.mensagem('Testando envio de email')\n.assunto('Envio cloud job')\n.enviar();\n```  \n#### Envio de e-mail com anexos  \n```bfc-script\nemail = Email.novo()\n2.\nimagemAssinatura = Email.criarAnexoUrl('http://www.betha.com.br/site/images/betha-2.png', 'logo.png')\n.dispostoParaVisualizacao()\n.incorporado()\n6.\ndestinatario = 'destinatario@betha.com.br'\n8.\nemail.de('betha@betha.com.br','Betha Sistemas')\n.para(destinatario, 'Destinatário')\n.copiaPara(destinatario, 'Destinatário de cópia')\n.copiaOcultaPara(destinatario)\n.responderPara(destinatario, 'Nome para Resposta')\n.assunto('Teste de e-mail')\n.mensagemHtml('Este é um teste de e-mail. <br/><br/>' +\n'Att, <br/><br/>' +\n'Betha Sistemas <p/><p/>' +\n'<img src=\"cid:logo.png\" width=\"319\" height=\"51\" />')\n.anexar(imagemAssinatura)\n.anexarUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\n.enviar()\n22.\n23.\nimprimir 'E-mail enviado com sucesso!'\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "API_email",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Envio de e-mail com anexos  \n```bfc-script\nemail = Email.novo()\n2.\nimagemAssinatura = Email.criarAnexoUrl('http://www.betha.com.br/site/images/betha-2.png', 'logo.png')\n.dispostoParaVisualizacao()\n.incorporado()\n6.\ndestinatario = 'destinatario@betha.com.br'\n8.\nemail.de('betha@betha.com.br','Betha Sistemas')\n.para(destinatario, 'Destinatário')\n.copiaPara(destinatario, 'Destinatário de cópia')\n.copiaOcultaPara(destinatario)\n.responderPara(destinatario, 'Nome para Resposta')\n.assunto('Teste de e-mail')\n.mensagemHtml('Este é um teste de e-mail. <br/><br/>' +\n'Att, <br/><br/>' +\n'Betha Sistemas <p/><p/>' +\n'<img src=\"cid:logo.png\" width=\"319\" height=\"51\" />')\n.anexar(imagemAssinatura)\n.anexarUrl('http://cnd.fgv.br/sites/cnd.fgv.br/files/teste_2.pdf', 'Nome do arquivo.pdf')\n.enviar()\n22.\n23.\nimprimir 'E-mail enviado com sucesso!'\n```  \n#### Enviar arquivos dos parâmetros do script e API de Arquivos  \n```bfc-script\ncsv = Arquivo.novo('teste.csv', 'csv')\ncsv.escrever('Valor')\n3.\nanexoCsv = Email.criarAnexoArquivo(csv, 'teste.csv')\n5.\nEmail.novo()\n.de('betha@betha.com.br','Betha Sistemas')\n.para('destinatario@betha.com.br', 'Destinatário')\n.assunto('Teste de e-mail')\n.mensagem('Novo arquivo enviado.')\n.anexar(anexoCsv)\n.anexarArquivo(parametros.arquivo.valor, 'Arquivo.xml')\n.enviar()\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_email.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Linguagem",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A linguagem possui poucos comandos e algumas similaridades com a linguagem Java, como os operadores (lógico, comparação, atribuição e aritimético), o uso de chaves para circundar blocos, sintaxe case sensitive, etc. Para simplificar os scripts, não",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "sensitive, etc. Para simplificar os scripts, não é necessário usar ponto e vírgula no final de cada instrução e os comandos foram desenvolvidos no idioma português, para simplificar o seu uso à usuários sem experiência em linguagens de programação.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "sem experiência em linguagens de programação.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Comandos  \n##### imprimir  \nExibe uma mensagem no console.  \n```bfc-script\nimprimir 'John Doe'\n```  \n##### percorrer  \nPermite iterar valores e obter o índice atual da iteração.  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```  \nO comando disponibiliza uma variável implícita chamada indice que representa o índice corrente da iteração.  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```  \nA variável indice pode ser atribuída a uma outra variável com um nome personalizado, permitindo que a mesma seja acessada em diversos níveis do comando percorrer.  \n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```  \nÉ possível também iterar pelos valores de um lista informando ou não o índice inicial e final da iteração  \n```bfc-script\nnumeros = [1,2,3]\npercorrer(de:1, ate:3, itens: numeros){\nimprimir item\n}\n// Irá imprimir os números 1, 2 e 3\n```  \n```bfc-script\nletras = ['A','B','C']\npercorrer(de:2, ate:3, itens: letras){\nimprimir item\n}\n// Irá imprimir as letras B e C, ou seja, do índice 2 até o índice 3\n```  \n* Caso o índice inicial não seja informado irá utilizar como padrão o valor 1 (primeiro item).",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Caso o índice final não seja informado irá utilizar como padrão o índice final da lista (último item).\n###### Controle do fluxo de execução",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O fluxo de execução de um comando percorrer pode ser alterado utilizando as funções **parar()** e **continuar()**. Este controle é especialmente útil quando se deseja interromper a execução de um comando percorrer devido à um condição específica ou",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "percorrer devido à um condição específica ou avançar para um próximo item do laço.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### **parar()**  \nA função parar interrompe um comando percorrer em determinada condição, e continua a execução do script sem passar pelas repetições seguintes.  \nO seguinte código irá imprimir os números 1, 2 e a palavra Ok:  \n```bfc-script\nnumeros = [1,2,3,4]\npercorrer(numeros){\nse(item == 3){\nparar()\n}\nimprimir item\n}\n8.\n//As instruções fora do comando percorrer serão executadas normalmente, somente o comando percorrer\n//será interrompido e não todo o script\nimprimir 'Ok'\n```",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnumeros = [1,2,3,4]\npercorrer(numeros){\nse(item == 3){\nparar()\n}\nimprimir item\n}\n8.\n//As instruções fora do comando percorrer serão executadas normalmente, somente o comando percorrer\n//será interrompido e não todo o script\nimprimir 'Ok'\n```  \n###### **continuar()**",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### **continuar()**  \nA função continuar faz com que o comando percorrer passe para a próxima repetição/item. Este função é especialmente útil em situações em que se deseje ignorar o processamento de um item com base em uma condição.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O seguinte código irá imprimir os números 1, 2 e 4 ignorando o número 3:  \n```bfc-script\nnumeros = [1,2,3,4]\npercorrer(numeros){\nse(item == 3){\ncontinuar()\n}\nimprimir item\n}\n```  \n###### Nomeando os comandos percorrer",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Em situações onde são utilizados mais de um comando percorrer aninhados e se deseje **_parar_** ou **_continuar_** um percorrer específico, a atribuição de um nome ao comando se faz necessário. Para nomear o comando basta preencher a propriedade",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "nomear o comando basta preencher a propriedade **nome** na declaração da instrução:",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nnumeros = [1,2,3,4]\npercorrer(itens: numeros, nome: 'p1'){\nimprimir 'p1: ' + item\npercorrer(de: 1, ate: 5){\nse (indice == 3){\nparar 'p1'\n}\nimprimir 'p2: ' + indice\n}\n}\n```  \nA saída do script será:  \n```bfc-script\np1: 1 // primeiro item da lista de números do percorrer 'p1'\np2: 1 // primeiro índice do segundo percorrer\np2: 2 // ...\np2: 3 // ...\np2: 4 // No índice 4 o comando parar 'p1' foi executado interrompendo a execução de todos os comandos percorrer até o 'p1'\n```  \nA mesma regra se aplica ao comando **_continuar()_** , porém ao invés de interromper a execução do comando percorrer irá avançar para o próximo índice/item.  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```0",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```0  \nA saída do script será:  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```1  \n##### retornar  \nPermite submeter dados como retorno de um script.  \nConforme podemos observar, a variável valor é submetida como retorno do script utilizando o comando retornar.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```2",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "No exemplo abaixo, os valores são retornados pelo comando retornar através de um mapa. As chaves valor e nome recebem seus respectivos valores e são submetidas ao comando retornar e serão resgatadas programaticamente através de um java.util.Map.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```3  \n##### se  \nPermite criar expressões condicionais.  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```4  \n##### tentar/tratar/finalizar",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Às vezes, a execução de uma ação pode acarretar em uma exceção. Quando isto ocorre, é possível que seja realizado um tratamento para que o script continue sua execução realizando alguma outra ação, como por exemplo, notificar outros usuários, tratar",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "por exemplo, notificar outros usuários, tratar alguns retornos conhecidos, tentar realizar a ação novamente, etc.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "No bloco _tentar_ devem ser colocadas as ações onde pode ocorrer um erro. Por exemplo, chamar um serviço HTTP, SOAP, escrever em um arquivo, etc.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Dentro do bloco _tratar_ deve ser especificado o código que será executado em caso de erro dentro do bloco tentar. Nele, existe uma variável chamada excecao que é uma representação do erro ocorrido. Ela possui os seguintes atributos:",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* _codigo_ \\- É um identificador alfanumérico erro para facilitar sua localização nos manuais e documentações\n* _mensagem_ \\- Uma mensagem passada pela API ou linguagem que representa a descrição do erro ocorrido",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* _linha_ \\- Linha onde ocorreu o erro\n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```5",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Ainda é possível que independentemente de ocorrer uma falha ou não, ao final da execução do método seja executada alguma ação. Para isso, existe também o bloco _finalizar_. Onde tudo o que for definido neste bloco, será executado independentemente",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "neste bloco, será executado independentemente de ocorrer um erro ou não.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```6  \nAlgumas observações referentes à este recurso:  \n* O bloco finalizar sempre é executado\n* Dentro do bloco finalizar, a variável _excecao_ já não está disponível\n* O comando _suspender_ não é tratado\n##### suspender",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### suspender  \nPermite suspender a execução de um script com uma exceção.  \n* se(codigo != 10){\n*    suspender \"O código $codigo é inválido\"\n* }\n##### esperar",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* }\n##### esperar  \nO comando esperar permite que a execução de um script entre em modo de pausa por um determinado intervalo tempo.  \nEste comando se mostra útil quando o acesso a um serviço é limitado por um intervalo de tempo.  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```7",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```7  \nÉ possível informar o intervalo de tempo utilizando a forma simplificada de tempo/datas da engine:  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```8",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```8  \nO tempo máximo de espera permitido por comando é de 60 segundos. Essa função está disponíveis ao usuário final apenas através da **Ferramenta de Scripts**.  \n##### exportar",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### exportar  \nComando utilizado para exportar símbolos declarados no escopo atual. Aceita como parâmetro um mapa com o nome externo e uma referência ao recursos exportado.  \n```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```9",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(ate:5){\nimprimir indice\n}\n```9  \nEste comando está disponível apenas na **Ferramenta de Scripts**.  \n##### importar",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### importar  \nComando utilizado para importar recursos de um componente. Aceita como parâmetro uma String com o nome do identificador do componente desejado, e retorna um objeto com os recursos importados.  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```0",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```0  \nEste comando está disponível apenas na **Ferramenta de Scripts**.  \n#### Listas  \nTambém conhecida como Arrays, podemos trabalhar com listas de maneira bem simplificada.  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```1",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```1\nA variável item e indice podem ser atribuídas à outras variáveis com nomes personalizados utilizando a seguinte sintaxe do comando percorrer:  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```2",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```2  \nObtendo e atribuindo valores em posições **específicas** da lista. A primeira posição da lista tem o índice **0 (zero)** , a segunda posição tem o índice **1** , e assim por diante. Os dados são acessados assim: **lista[indice]**",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```3  \n#### Mapas  \nÉ possível criar mapas simplificados e acessar seu valores de forma explicita.  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```4  \nObserve o exemplo abaixo, usando uma **lista de mapas** :  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```5  \n#### Intervalos",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Intervalos permitem que você crie uma lista de valores sequenciais podendo serem utilizados como listas. A notação .. define um intervalo, do primeiro item até o último. Intervalos definidos com a notação ..< incluem o primeiro valor, mas não o",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "a notação ..< incluem o primeiro valor, mas não o último valor.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```6  \n#### Datas",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A linguagem permite trabalhar com datas de forma bem simplificada. Várias funções estão embutidas nos elementos de data facilitando muito o uso, além de tornar as implementações bem intuitivas. O exemplo abaixo demonstra o uso de algumas funções",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "exemplo abaixo demonstra o uso de algumas funções para datas da API padrão e como utilizar estas funções de forma simplificada, além de demonstrar formas nativas para somar datas/horas/etc.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```7  \nÉ importante notar que os valores numéricos informados nas funções de data para representar ano, mês, dias, horas e segundos, diferentemente da formatação Brasileira, não devem conter zeros à esquerda:  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```8",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```8  \n#### Valores nulos",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Em programação de computadores, null é um valor especial para um ponteiro (ou qualquer outro tipo de referência) que indica que este ponteiro, intencionalmente, não se refere a um objeto (ponteiro nulo) -",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "não se refere a um objeto (ponteiro nulo) - [Wikipedia](https://pt.wikipedia.org/wiki/Null_\\(programa%C3%A7%C3%A3o\\)\\]\\]).",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Este recurso se mostra útil para identificar quando um valor não esta disponível, assumindo um valor próprio para este comportamento, o nulo ou vazio.",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": false
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A palavra reservada `nulo` representa o valor para este comportamento, de modo que no exemplo abaixo estamos dizendo que a variável `valorCusto` é igual a nulo ou em outras palavras, que seu valor é vazio.  \n```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```9\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```0\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```1",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){\nimprimir indice\n}\n```9\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```0\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```1\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```2\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```3",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```1\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```2\n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```3\nEm algumas ocasiões, gostariamos de considerar um valor padrão onde o resultado seria nulo. Para este propósito utilizamos a expressão ternária (?:), como podemos observar abaixo:  \n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```4",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "Linguagem",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```4\nPoderiamos usar esta expressão diretamente, conforme o exemplo abaixo:  \n```bfc-script\npercorrer(de:3, ate:5){ idPrincipal ->\nimprimir idPrincipal\npercorrer(de:6, ate:8){ idSecundario ->\nimprimir 'ID princial: ' + idPrincipal\nimprimir 'ID secundário: ' + idSecundario\n}\n}\n```5",
        "metadata": {
            "source": "docs/BFC Doc/Linguagem.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Arquivos",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O bfc-script disponibiliza uma API para leitura e escrita de arquivos. As funções são separadas por tipo de arquivo e são invocadas como métodos. Esta sessão abordará o uso de cada função da API de arquivos e os detalhes de cada implementação. Essas",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "e os detalhes de cada implementação. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Leitura de arquivos",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A leitura de arquivos está disponível através da função _Arquivo.ler()_. Esta função irá retornar uma implementação específica com operações distintas para realizar a leitura do arquivo conforme tipo. Esta função contém algumas variações para",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "tipo. Esta função contém algumas variações para permitir diferentes origens e a passagem de parâmetros para as implementações:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.ler(_arquivo ou conteúdo_): Realiza a leitura do arquivo utilizando a implementação padrão para arquivos texto.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.ler(_arquivo ou conteúdo, tipo do arquivo_): Realiza a leitura do arquivo utilizando a implementação própria para o tipo de arquivo informado.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.ler(_arquivo ou conteúdo, tipo do arquivo, parametros_): Realiza a leitura de arquivo utilizando a implementação própria para o tipo do arquivo informado permitindo a passagem de parâmetros específicos da implementação.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Exemplo de utilização:  \n```bfc-script\narquivoTxt = Arquivo.ler(origem, 'txt');\narquivoCsv = Arquivo.ler('Bob|Esponja', 'csv', [delimitador:'|']);\n```  \n#### Escrita de arquivos",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A criação de um novo arquivo está disponível através da função _novo_. Esta função irá retornar uma implementação específica com operações distintas para realizar a escrita do arquivo conforme tipo. A função _novo_ contem algumas variações:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.novo(_nome do arquivo_): Cria um novo arquivo utilizando a implementação padrão para arquivos texto.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.novo(_nome do arquivo, tipo do arquivo_): Cria um novo arquivo arquivo utilizando a implementação própria para o tipo de arquivo informado.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Arquivo.novo(_nome do arquivo, tipo do arquivo, parametros_): Cria um novo arquivo utilizando a implementação própria para o tipo de arquivo informado permitindo a passagem de parâmetros específicos da implementação.\nExemplo de utilização:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Exemplo de utilização:  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```  \n#### Download dos arquivos",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Por padrão a API de arquivos não disponibiliza para download os arquivos criados pelas implementações. Para que os mesmos sejam incluídos no arquivo zip de resultado da execução de um script através da **Ferramenta de Scripts** é necessário",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "através da **Ferramenta de Scripts** é necessário adicionar estes arquivos ao resultado.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```  \n## Implementações  \n### Arquivos Texto (txt)  \n#### Leitura  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```  \nLendo um arquivo com um Encoding específico (Por padrão utiliza UTF-8):  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```  \n##### lerLinha()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```  \n##### lerLinha()  \nRealiza a leitura de uma linha do arquivo e retorna o conteúdo lido.  \n```bfc-script\ntexto = arquivo.lerLinha()\n```  \n##### contemProximaLinha()  \nVerificar se o arquivo sendo lido contém uma próxima linha  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```  \n#### Escrita",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```  \n#### Escrita  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```  \nCriando um novo arquivo com um Encoding específico (Por padrão utiliza UTF-8):  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt', 'txt', [ encoding: 'iso-8859-1' ]);\n```  \n##### escrever(texto)  \nRealiza a escrita de um conteúdo no arquivo  \n```bfc-script\narquivo.escrever('Jonathan Peters')\n```  \n##### novaLinha()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo.escrever('Jonathan Peters')\n```  \n##### novaLinha()  \nRealiza a escrita de uma quebra de linha no arquivo  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```0  \n### Arquivos CSV (csv)  \n#### Leitura  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```1  \nLendo um arquivo com um Encoding específico (Por padrão utiliza UTF-8):  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```  \n**Parâmetros de leitura:**  \n* _delimitador_ : Caracter que delimita os valores do arquivo CSV. Por padrão utiliza uma virgula.\n* _encoding_ : Determina o encoding a ser usado na leitura do arquivo. Por padrão utiliza UTF-8.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### lerLinha()  \nRealiza a leitura de uma linha do arquivo e retorna o conteúdo lido.  \n```bfc-script\ntexto = arquivo.lerLinha()\n```  \n##### contemProximaLinha()  \nVerificar se o arquivo sendo lido contém uma próxima linha  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```  \n##### pularLinhas(int linhas)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```  \n##### pularLinhas(int linhas)  \nIgnora a leitura da quantidade de linhas informado no parâmetro com base na linha atual  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```5  \n##### lerProximoValor()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```5  \n##### lerProximoValor()  \nRealiza a leitura do próximo valor do arquivo considerando o delimitador. Esta função realiza a leitura de todo o arquivo e não somente da linha atual.  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```6  \n##### contemProximoValor()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```6  \n##### contemProximoValor()  \nIndica se existe um próximo valor a ser lido no arquivo atual.  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```7  \n#### Escrita  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```8  \nCriando um novo arquivo com um Encoding específico (Por padrão utiliza UTF-8):",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```9  \n**Parâmetros de escrita:**  \n* _delimitador_ : Caracter para delimitar os valores do arquivo CSV. Por padrão utiliza uma virgula.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* _entreAspas_ : Indica se os valores escritos no arquivo deverão estar entre aspas duplas. Utilizar _S_ para Sim e _N_ para Não.\n* _encoding_ : Determina o encoding a ser usado na criação do arquivo. Por padrão utiliza UTF-8.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escrever(texto)  \nRealiza a escrita de um conteúdo no arquivo utilizando o delimitador parametrizado.  \n```bfc-script\narquivo.escrever('Jonathan Peters')\n```  \n##### novaLinha()  \nRealiza a escrita de uma quebra de linha no arquivo  \n```bfc-script\narquivoTxt = Arquivo.novo('Jones.txt')\narquivoCsv = Arquivo.novo('Spencer.csv', 'csv', [entreAspas: 'N'])\n```0  \n### Arquivos XML (xml)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Arquivos XML (xml)  \nOs documentos XML são lidos e escritos por item/evento. Cada parte do documento é considerado um item e possui caracteristicas diferentes. No exemplo abaixo podemos afirmar que o documento XML possui 5 itens/eventos:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```2  \ndos quais:  \n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```3\n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```4\n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```5\n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```6\n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```7  \n### Implementação  \n#### Leitura  \n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```8  \n##### tipo()  \nRetorna o tipo do item sendo lido. Os valores disponíveis são:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* INICIO_DOCUMENTO\n* FIM_DOCUMENTO\n* INICIO_ELEMENTO\n* FIM_ELEMENTO\n* ATRIBUTO\n* DTD\n* CDATA\n* NAMESPACE\n* TEXTO\n* COMENTARIO\n* ESPACO\n* DECLARACAO_NOTACAO\n* DECLARACAO_ENTIDADE\n* REFERENCIA_ENTIDADE\n##### valor()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### valor()  \nRetorna o valor texto do item corrente. Caso o item seja um elemento complexo irá retornar em branco. Tipos suportados: _INICIO_ELEMENTO_ , _FIM_ELEMENTO_ , _ATRIBUTO_ , _REFERENCIA_ENTIDADE_ , _DECLARACAO_ENTIDADE_.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemValor()  \nIndica se o item atual contém um valor do tipo texto e se o mesmo é diferente de vazio.  \n```bfc-script\ntxt = Arquivo.novo('teste.txt', 'txt')\n2.\n//Adiciona o arquivo txt no zip do resultado\nResultado.arquivo(txt)\n5.\n//Personaliza o nome do arquivo no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt')\n8.\n//Personaliza o nome do arquivo e do diretório no zip do resultado\nResultado.arquivo(txt, 'meu_arquivo.txt', 'Arquivos texto')\n11.\n//Personaliza o nome do arquivo\nResultado.nome('meu_resultado.zip')\n```9  \n##### contemNome()  \nIndica se o item atual contém um nome e se o mesmo é diferente de vazio.  \n##### nome()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### nome()  \nRetorna o nome do item atual. Caso o item não seja suportado irá retornar em branco. Tipos suportados: _INICIO_ELEMENTO_ , _FIM_ELEMENTO_ , _ATRIBUTO_ , _REFERENCIA_ENTIDADE_ , _DECLARACAO_ENTIDADE_.  \n##### xml()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### xml()  \nRetorna o item atual no formato XML.  \n##### namespaces()  \nRetorna uma lista contendo os namespaces presentes no item atual. Tipos suportados: _INICIO_ELEMENTO_ , _FIM_ELEMENTO_ , _ATRIBUTO_ , _NAMESPACE_",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Um Namespace contem as seguintes informações:  \n* prefixo(): Prefixo do namespace\n* namespace(): Valor do namespace  \n##### contemNamespace(namespace)  \nIndica se o item atual contém um namespace declarado igual ao informado por parâmetro.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemNamespace(namespace, prefixo)  \nIndica se o item atual contém um namespace declarado com valor e prefixo igual aos parâmetros.  \n##### atributos()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### atributos()  \nRetorna uma lista contendo os atributos presentes no item atual. Tipos suportados: _INICIO_ELEMENTO_  \nUm Atributo contem as seguintes informações:  \n* prefixo(): Prefixo do namespace\n* namespace(): Namespace do atributo",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* namespace(): Namespace do atributo  \n* nome(): nome do atributo\n* valor(): valor do atributo  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```0  \n##### contemAtributo(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```0  \n##### contemAtributo(nome)  \nIndica se o elemento atual contém um atributo com o nome informado no parâmetro. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_  \n##### contemAtributo(nome, namespace)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemAtributo(nome, namespace)  \nIndica se o elemento atual contém um atributo com o nome e namespace informado no parâmetro. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_  \n##### contemAtributo(nome, namespace, prefixo)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemAtributo(nome, namespace, prefixo)  \nIndica se o elemento atual contém um atributo com o prefixo, nome e namespace informado no parâmetro. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_  \n##### atributo(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### atributo(nome)  \nRetorna o [atributo](index.html#apiArquivosImplementacoesXmlTiposAtributo) do elemento com base no nome informado no parâmetro. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_  \n##### atributo(nome, namespace)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### atributo(nome, namespace)  \nRetorna o [atributo](index.html#apiArquivosImplementacoesXmlTiposAtributo) do elemento com base no namespace e nome informado nos parâmetros. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### atributo(nome, namespace, prefixo)  \nRetorna o [atributo](index.html#apiArquivosImplementacoesXmlTiposAtributo) do elemento com base no prefixo, namespace e nome informado nos parâmetros. Tipos suportados: _INICIO_ELEMENTO_ , _ATRIBUTO_",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoInicioDocumento  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a INICIO_DOCUMENTO  \n##### ehTipoFimDocumento",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoFimDocumento  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a FIM_DOCUMENTO  \n##### ehTipoTexto  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a TEXTO",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoComentario  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a COMENTARIO  \n##### ehTipoFimElemento",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoFimElemento  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a FIM_ELEMENTO  \n##### ehTipoInicioElemento",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoInicioElemento  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a INICIO_ELEMENTO  \n##### ehTipoEspaco",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoEspaco  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a ESPACO  \n##### ehTipoCData  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a CDATA",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehTipoAtributo  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a ATRIBUTO  \n##### ehTipoNamespace  \nIndica se o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do item atual é igual a NAMESPACE",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemProximo()  \nIndica se o documento atual contem um próximo item a ser lido.  \n##### tipoProximo()  \nRetorna o [tipo](index.html#apiArquivosImplementacoesXmlTipos) do próximo item caso a leitura do documento não tenha sido finalizada.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### proximo()  \nItera no documento passando a leitura para o próximo item. Tem como retorno o tipo do novo item.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```1  \n##### proximaTag()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```1  \n##### proximaTag()  \nItera no documento passando a leitura para o próxima tag encontrada (INICIO_ELEMENTO ou FIM_ELEMENTO). Tem como retorno o tipo do novo item atual.  \n##### contemProximoElemento()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### contemProximoElemento()  \nIndica se o documento atual contem um próximo elemento a ser lido.  \n##### proximoElemento()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### proximoElemento()  \nItera no documento passando a leitura para o próximo elemento (INICIO_ELEMENTO). Tem como retorno um valor booleano indicando se a leitura do próximo elemento foi realizada ou se o documento chegou ao fim.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```2",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```2  \n##### proximoElemento(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Itera no documento passando a leitura para o próximo elemento cujo nome seja igual ao valor informado no parâmetro. Tem como retorno um valor booleano indicando se a leitura do elemento foi realizada ou se o documento chegou ao fim e o mesmo não foi",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "ou se o documento chegou ao fim e o mesmo não foi encontrado.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### proximoElemento(nome, namespace)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Itera no documento passando a leitura para o próximo elemento cujo nome e namespace sejam iguais aos valores informados nos parâmetros. Tem como retorno um valor booleano indicando se a leitura do elemento foi realizada ou se o documento chegou ao",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "foi realizada ou se o documento chegou ao fim e o mesmo não foi encontrado.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Escrita  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```3  \n**Parâmetros de escrita:**  \n* _encoding_ : Encoding do documento XML. Por padrão utiliza UTF-8.\n* _indentar_ : Indica se o documento será escrito indentado ou de forma linear. Utilizar _S_ para Sim e _N_ para Não.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### namespacePadrao(namespace)  \nDefine o namespace padrão do elemento XML.  \n##### prefixo(prefixo, uri)  \nDefine o prefixo de uma URI.  \n##### escreverAtributo(nome, valor)  \nEscreve um novo atributo no elemento atual.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```4",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```4  \n##### escreverAtributo(nome, valor, namespace)  \nEscreve um novo atributo no elemento atual informando também o namespace.  \n##### escreverAtributo(nome, valor, namespace, prefixo)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um novo atributo no elemento atual informando também o namespace.  \n##### escreverCData(data)  \nEscreve uma área com conteúdo CDATA no documento XML.  \n##### escreverTexto(texto)  \nEscreve texto no item atual.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve texto no item atual.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```5  \n##### escreverComentario(comentario)  \nEscreve um comentário no documento XML.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```6  \n##### escreverNamespace(namespace)  \nEscreve um namespace no elemento atual.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um namespace no elemento atual.  \n##### escreverNamespace(namespace, prefixo)  \nEscreve um namespace com prefixo no elemento atual.  \n##### escreverDTD(dtd)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverDTD(dtd)  \nEscreve um [DTD](http://www.w3schools.com/xml/xml_dtd_intro.asp) no documento XML.  \n##### escreverElementoVazio(elemento)  \nEscreve um elemento vazio no documento XML:  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```7  \n##### escreverElementoVazio(elemento, namespace)  \nEscreve um elemento vazio e namespace no documento XML.  \n##### escreverElementoVazio(elemento, namespace, prefixo)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um elemento vazio e namespace com prefixo no documento XML.  \n##### escreverInicioDocumento()  \nEscreve a declaração de um documento XML.  \n##### escreverInicioDocumento(encoding)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverInicioDocumento(encoding)  \nEscreve a declaração de um documento XML informando o encoding.  \n##### escreverInicioDocumento(encoding, versao)  \nEscreve a declaração de um documento XML informando o encoding e versão.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```8",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```8  \n##### escreverInicioDocumento(encoding, versao, standalone)  \nEscreve a declaração de um documento XML informando o encoding, versão e standalone.  \n##### escreverFimDocumento()  \nEscreve o fim do documento XML.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve o fim do documento XML.  \n##### escreverInicioElemento(nome)  \nEscreve o início de um elemento no documento XML.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt')\n```9  \n##### escreverInicioElemento(nome, namespace)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverInicioElemento(nome, namespace)  \nEscreve o início de um elemento com namespace no documento XML.  \n##### escreverInicioElemento(nome, namespace, prefixo)  \nEscreve o início de um elemento com namespace e prefixo no documento XML.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverFimElemento()  \nEscreve o fim do elemento atual.  \n##### nomeElementoAtual()  \nRetorna o nome do elemento sendo editado.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```0  \n##### escreverFimElementos()  \nEscreve o fim de todos os elementos atualmente abertos.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```1  \n##### escreverFimElementos(elementoParar)  \nEscreve o fim de todos os elementos abertos abaixo do elemento informado no parâmetro.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```2  \n##### escreverElementoTexto(nome, valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverElementoTexto(nome, valor)  \nEscreve um elemento texto no documento XML.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```3  \n##### escreverElementoTexto(nome, valor, namespace)  \nEscreve um elemento texto com namespace.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um elemento texto com namespace.  \n##### escreverElementoTexto(nome, valor, namespace, prefixo)  \nEscreve um elemento texto com namespace e prefixo.  \n##### escrever(xml)  \nEscreve um bloco XML no arquivo atual.  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```4",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```4  \n##### contemElementoAberto()  \nIndica se o documento atual contém algum início de elemento sem um fim declarado.  \n##### escreverReferencia(nome, id, valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverReferencia(nome, id, valor)  \nEscreve a referência à uma [entidade](http://www.w3schools.com/xml/xml_dtd_entities.asp) no documento XML.  \n##### escreverInstrucaoProcessamento(target, conteudo)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve as instruções de processamento no documento.  \n##### escreverEspaco(conteudo)  \nEscreve um item texto do [tipo](index.html#apiArquivosImplementacoesXmlTipos) ESPACO  \n##### escreverEspacoIgnoravel(conteudo)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverEspacoIgnoravel(conteudo)  \nEscreve um item texto do [tipo](index.html#apiArquivosImplementacoesXmlTipos) ESPACO ignorável.  \n### Arquivos JSON (json)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Arquivos JSON (json)  \nOs documentos JSON são lidos e escritos por item/evento. Cada parte do documento é considerado um item e possui caracteristicas diferentes. No exemplo abaixo podemos afirmar que o documento JSON possui 4 itens:",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```5  \ndos quais:  \n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```6\n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```7\n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```8\n```bfc-script\narquivo = Arquivo.ler(arquivo, 'txt', [ encoding: 'iso-8859-1' ]);\n```9  \n### Implementação  \n#### Leitura  \n```bfc-script\ntexto = arquivo.lerLinha()\n```0  \nAvança a leitura para o próximo item  \n##### ehInicioObjeto()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehInicioObjeto()  \nRetorna um valor booleano indicando se o item atual é o inicio de um objeto  \n##### ehInicioMatriz()  \nRetorna um valor booleano indicando se o item atual é o inicio de uma matriz (array)  \n##### ehFimObjeto()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehFimObjeto()  \nRetorna um valor booleano indicando se o item atual é o fim de um objeto  \n##### ehFimMatriz()  \nRetorna um valor booleano indicando se o item atual é o fim de uma matriz (array)  \n##### ehNomeCampo()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehNomeCampo()  \nRetorna um valor booleano indicando se o item atual é o nome de um campo  \n##### ehTexto()  \nRetorna um valor booleano indicando se o item atual é um texto  \n##### ehNumero()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehNumero()  \nRetorna um valor booleano indicando se o item atual é um número  \n##### ehBooleano()  \nRetorna um valor booleano indicando se o item atual é um booleano  \n##### ehNulo()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### ehNulo()  \nRetorna um valor booleano indicando se o item atual é nulo  \n##### texto()  \nRetorna o valor do item atual como texto  \n##### numero()  \nRetorna o valor do item atual como número  \n##### booleano()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### booleano()  \nRetorna o valor do item atual como booleano  \n##### jsonParser()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Retorna a implementação nativa do parse que está sendo usado, para possibilitar implementações avançadas, acesse <https://fasterxml.github.io/jackson-core/javadoc/2.5/com/fasterxml/jackson/core/JsonParser.html> para mais informações.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Escrita  \n```bfc-script\ntexto = arquivo.lerLinha()\n```1  \nEscreve o inicio de uma matriz (array)  \n##### escreverFimMatriz()  \nEscreve o fim de uma matriz (array)  \n##### escreverInicioObjeto()  \nEscreve o inicio de um objeto  \n##### escreverFimObjeto()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverFimObjeto()  \nEscreve o fim de um objeto  \n##### escreverNomeCampo(nome)  \nEscreve o nome do campo  \n```bfc-script\ntexto = arquivo.lerLinha()\n```2  \n##### escreverTexto(texto)  \nEscreve um texto  \n```bfc-script\ntexto = arquivo.lerLinha()\n```3  \n##### escreverNumero(numero)  \nEscreve um número",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um número  \n```bfc-script\ntexto = arquivo.lerLinha()\n```4  \n##### escreverBooleano(booleano)  \nEscreve um boolenao  \n```bfc-script\ntexto = arquivo.lerLinha()\n```5  \n##### escreverNulo()  \nEscreve o valor nulo  \n```bfc-script\ntexto = arquivo.lerLinha()\n```6  \n##### escreverObjeto(objeto)  \nEscreve um objeto completo  \n```bfc-script\ntexto = arquivo.lerLinha()\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Escreve um objeto completo  \n```bfc-script\ntexto = arquivo.lerLinha()\n```7  \n```bfc-script\ntexto = arquivo.lerLinha()\n```8  \n##### escreverCampoTexto(nome, texto)  \nEscreve o nome e o valor de campo do tipo texto  \n##### escreverCampoBooleano(nome, booleano)  \nEscreve o nome e o valor de campo do tipo booleano",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverCampoNulo(nome)  \nEscreve o nome e o valor de campo nulo  \n##### escreverCampoNumero(nome, numero)  \nEscreve o nome e o valor de campo do tipo numero  \n##### escreverCampoInicioMatriz(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverCampoInicioMatriz(nome)  \nEscreve o nome e o inicio de um campo do tipo matriz (array)  \n##### escreverCampoInicioObjeto(nome)  \nEscreve o nome e o inicio de um campo do tipo objeto  \n##### escreverCampoObjeto(nome, objeto)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### escreverCampoObjeto(nome, objeto)  \nEscreve o nome e o valor de um campo do tipo objeto  \n##### jsonGenerator()",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "##### jsonGenerator()  \nRetorna a implementação nativa do jsonGenerator que está sendo utilizado, para mais informações acesse <https://fasterxml.github.io/jackson-core/javadoc/2.8/com/fasterxml/jackson/core/JsonGenerator.html>",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": false
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Arquivos ZIP (zip)  \n#### Leitura  \nA leitura de arquivos .zip está disponível através da seguinte chamada:  \n```bfc-script\ntexto = arquivo.lerLinha()\n```9  \nOnde iterando, é possível navegar entre os arquivos:  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```0  \n**Obs:** Caso durante a geração do zip, seja utilizado um encoding diferente do UTF-8, o valor deve ser informado. Por exemplo:  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```1  \n#### Escrita  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```2  \n##### criarDiretorio",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```2  \n##### criarDiretorio  \nRealiza a criação de um diretório em branco no arquivo zip  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```3  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```4  \n##### adicionar(Arquivo)  \nAdiciona um arquivo no diretório raiz do arquivo zip  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```5  \n##### adicionar(Arquivo, Nome do arquivo no zip)  \nAdiciona um arquivo no diretório raiz do arquivo zip utilizando o nome informado no segundo parâmetro  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```6  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```6  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```7  \n##### adicionar(Arquivo, Nome do arquivo no zip, Diretório)",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Adiciona um arquivo em um determinado diretório do arquivo zip utilizando o nome informado como parâmetro. Caso o diretório não exista no arquivo zip o mesmo será criado.  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```8  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```9",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```8  \n```bfc-script\npercorrer(enquanto: { arquivo.contemProximaLinha() }) {\nimprimir arquivo.lerLinha()\n}\n```9  \nÉ possível criar subdiretórios utilizando o separador **/** no nome do diretório:  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```0  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```1  \n##### adicionar(Lista de arquivos)  \nAdiciona um ou mais arquivos no diretório raiz do arquivo zip.",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```2  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```3  \n##### adicionar(Lista de arquivos, Diretório)  \nAdiciona um ou mais arquivos no diretório informado no parâmetro do arquivo zip. Caso o diretório não exista o mesmo será criado.  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```4  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_arquivos",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```4  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```5  \n##### comentario(Comentário)  \nAdiciona um comentário às informações do arquivo zip  \n```bfc-script\narquivo = Arquivo.novo('FendaDoBiquine.txt')\n```6",
        "metadata": {
            "source": "docs/BFC Doc/API_arquivos.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Fonte de Dados",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "O bfc-script disponibiliza uma API para consumo das fonte de dados registradas pelas aplicações no catálogo de dados da Betha Sistemas. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Uma fonte de dados é composta por um Ativo, um Tema, e as Operações propriamente ditas. A API de script utiliza a seguinte estrutura para representar estes componentes:  \n**Dados**.**ativo**._versao_.**tema**.**operacao()**  \n### Ativo",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Ativo  \nUm Ativo pode ser considerado como a fonte/origem das informações. É nele que as operações de busca e manipulação de dados serão executadas.  \n### Tema",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Tema  \nUm tema pertence à um Ativo e representa um grupo de informação em comum. Exemplos de possíveis temas do Ativo folha seriam funcionarios, feriados, etc.  \n### Operações",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Operações são funções de busca/manipulação de dados disponibilizadas através de um Tema. Considerando o exemplo do tema funcionário do ativo folha, teriamos como possíveis operações a criação de um funcionário, busca dos registros, cálculo da folha,",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "busca dos registros, cálculo da folha, etc.",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "As Operações básicas de um Tema são:  \n* Operação de busca\n* Operação de criação\n* Operação de atualização\n* Operação de exclusão\n**A disponibilidade de cada operação depende do ativo e tema utilizado.**  \n### Operação de busca",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "### Operação de busca  \nA operação de busca padrão conta com os seguintes parâmetros:  \n* **criterio** : Parâmetro utilizado para filtrar os dados da busca.\n```bfc-script\ntema.busca(criterio:\"nome = 'Maria' and idade > 18\")\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntema.busca(criterio:\"nome = 'Maria' and idade > 18\")\n```  \n* **ordernacao** : Parâmetro utilizado para informar a ordem do resultado da busca. o valor deste parâmetro deve ser preenchido com o nome dos campos separados por virgula seguido da orientação (asc - Ascendente, desc - Descendente).",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntema.busca(ordenacao:\"nome,sobrenome asc, cidade desc\")\n```  \n* **campos** : Parâmetro utilizado para informar quais campos do registro devem estar no resultado da busca.\n```bfc-script\ntema.busca(campos:\"nome, sobrenome, cidade(nome, uf)\")\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntema.busca(campos:\"nome, sobrenome, cidade(nome, uf)\")\n```  \n* **parametros** : Utilizado para informar os valores dos parâmetros da operação. O nome dos parâmetros pode variar conforme ativo, tema e operação utilizada.\n```bfc-script\nativo.telefones.busca(parametros:[codigoFuncionario:15])\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **consolidado** : Utilizado para informar se os valores retornados devem ser consolidados de acordo com o cadastro de contextos compartilhados. Caso seja passado true, será executado uma consulta na fonte de dados para cada entidade e database",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "na fonte de dados para cada entidade e database configurados, ignorando a entidade e database atual.",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nativo.telefones.busca(consolidado:true)\n```  \n**Exemplo:**  \n```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n2.\npercorrer(dadosFuncionarios.busca(ordenacao:\"rg desc\", campos:\"nome, rg, id, dataAdmissao, dataNascimento\")){\nimprimir \"##Funcionario\"\nimprimir item.dataNascimento\nimprimir item\n7.\nimprimir \"##Telefones: \"\npercorrer(dadosFuncionarios.telefones.busca(parametros:[codigoFuncionario:item.id])){\nimprimir item\n}\n}\n```  \nPara retornar um único item, deve-se utilziar o parâmetro primeiro:true na operação de busca.  \n```bfc-script\ndadosFuncionarios.busca(ordenacao:\"rg desc\", campos:\"nome, rg, id, dataAdmissao, dataNascimento\", primeiro:true)\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **valorPadrao** : Parâmetro utilizado para ativar/desativar o valor padrão dos campos quando nulos. Caso este parâmetro seja _verdadeiro_ os registros das fontes de dados poderão conter propriedades nulas que deverão ser tratadas pelo próprio",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "nulas que deverão ser tratadas pelo próprio script.",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": false
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ntema.busca(valorPadrao: falso)\n```  \n### Operação de criação  \nA operação de criação padrão conta com os seguintes parâmetros:",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **parametros** : Utilizado para informar os valores dos parâmetros da operação. O nome dos parâmetros pode variar conforme ativo, tema e operação utilizada.\n* **conteudo** : Dados do registro a ser criado.\n```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n2.\ntelefone = [\nsequencial: 10,\ntelefone: '488817858',\ntipo: 'OUTRO',\ntipoNumero: 'CELULAR',\ndescricao: \"Outro Celular\"\n]\n10.\ntelefoneCriado = dadosFuncionarios.telefones.cria(parametros: [codigoFuncionario:12], conteudo: telefone)\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n2.\ntelefone = [\nsequencial: 10,\ntelefone: '488817858',\ntipo: 'OUTRO',\ntipoNumero: 'CELULAR',\ndescricao: \"Outro Celular\"\n]\n10.\ntelefoneCriado = dadosFuncionarios.telefones.cria(parametros: [codigoFuncionario:12], conteudo: telefone)\n```  \n### Operação de atualização  \nA operação de atualização padrão conta com os seguintes parâmetros:",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **parametros** : Utilizado para informar os valores dos parâmetros da operação. O nome dos parâmetros pode variar conforme ativo, tema e operação utilizada.\n* **conteudo** : Dados do registro a ser atualizado.\n```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n2.\ntelefone = [\ntelefone: '488817858'\n]\n6.\ntelefoneAlterado = dadosFuncionarios.telefones.atualiza(parametros: [codigoFuncionario: 12, codigoTelefone: 15], conteudo: telefone)\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\ndadosFuncionarios = Dados.dubai.v1.funcionarios\n2.\ntelefone = [\ntelefone: '488817858'\n]\n6.\ntelefoneAlterado = dadosFuncionarios.telefones.atualiza(parametros: [codigoFuncionario: 12, codigoTelefone: 15], conteudo: telefone)\n```  \n### Operação de exclusão  \nA operação de exclusão padrão conta com os seguintes parâmetros:",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_fonteDados",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **parametros** : Utilizado para informar os valores dos parâmetros da operação. O nome dos parâmetros pode variar conforme ativo, tema e operação utilizada.\n```bfc-script\ntema.busca(ordenacao:\"nome,sobrenome asc, cidade desc\")\n```0",
        "metadata": {
            "source": "docs/BFC Doc/API_fonteDados.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de HTTP  \nO bfc-script disponibiliza uma API para consumo de serviços web HTTP. Essas funções estarão disponíveis ao usuário final apenas através da **Ferramenta de Scripts** , e serão absorvidas plenamente conforme a utilização.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A API conta com algumas representações básicas de funcionamento sendo elas a **Requisição** e a **Resposta**. A **Requisição** trata-se da definição de uma ou várias chamadas à um serviço HTTP comum, cada interação com esse serviço é realizado",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "cada interação com esse serviço é realizado através dos métodos/verbos padrões do HTTP. O produto desta interação quando executada é uma **Resposta** , essa resposta pode ser transformada em vários tipos e saídas, sendo elas um JSON no formato de",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "tipos e saídas, sendo elas um JSON no formato de Mapa (quando a resposta do serviço for JSON), Uma fonte de arquivo para utilização em conjunto com outras APIs (E-mail, Arquivos), O conteúdo da resposta no formato de texto em sí ou simplesmente a",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "no formato de texto em sí ou simplesmente a impressão da resposta no console do script.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "![Fluxo da API de HTTP](images/fluxo-api-http.png)  \n### Requisição  \nPara criar uma nova requisição HTTP deve-se utilizar a função Http.**servico** , a função recebe como parâmetro a URL do serviço a ser consumido:  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\n```  \nA URL informada pode conter marcadores, estes marcadores serão substituídos por um determinado valor no momento da execução de um método HTTP.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```  \nAs opções disponíveis na API para interagir com um serviço são:",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cookie(nome, valor)  \nAdiciona um cookie na requisição HTTP.  \n#### cookie(nome, valor, caminho, domínio, versão)  \nAdiciona um cookie na requisição HTTP informando também o caminho/path, domínio e versão do cookie.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cookie(Mapa[nome, valor])  \nAdiciona um ou vários cookies (nome/valor) na requisição HTTP com base em uma mapa.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```  \n#### cabecalho(nome, valor)  \nAdiciona um cabeçalho/header na requisição HTTP.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cabecalho(nome, lista de valores)  \nAdiciona um cabeçalho/header com vários valores na requisição HTTP.  \n#### cabecalho(Mapa[nome, valor])  \nAdiciona um ou vários cabeçalhos/headers (nome/valor) na requisição HTTP com base em uma mapa.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```  \n**Parâmetros e caminhos**",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para permitir que um mesmo serviço atenda as mais diversas situações encontradas em APIs HTTP, as funções caminho() e parametro() possuem um comportamento diferenciado das demais. Estas funções quando executadas criam uma cópia da requisição atual",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "executadas criam uma cópia da requisição atual adicionado os respectivos parâmetro(s)/caminho(s). Desta forma a requisição original não é alterada e pode ser reutilizada para outras invocações no mesmo serviço.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Exemplo:  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```  \n#### parametro(nome, valor)  \nCria uma cópia da requisição atual adicionando um parâmetro de query.  \n#### parametro(nome, lista de valores)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### parametro(nome, lista de valores)  \nCria uma cópia da requisição atual adicionando um ou mais parâmetros de query na requisição.  \n#### parametro(Mapa[nome, valor])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### parametro(Mapa[nome, valor])  \nCria uma cópia da requisição atual adicionando um ou mais parâmetros de query na requisição com base no mapa informado no parâmetro.  \n```bfc-script\nservico.parametro('id', '1') //posts?id=1\nservico.parametro('id', ['1', '2', '5']) //posts?id=1&id=2&id=5\nservico.parametro([ id: '5', nome: 'joao']) //posts?id=1&nome=joao\n```  \n```bfc-script\nservico = Http.servico(...)\nservico.parametro('id', 1)\nservico.parametro('id', 2)\n4.\nimprimir servico.parametros() //[] - Vazio pois como cria uma cópia o serviço original não é alterado\nservico = servico.parametro('id', 1)\n.parametro('id', 2)\n8.\nimprimir servico.parametros() //[id : [1,2]] - pois atribuímos a cópia o serviço original\n```  \n#### caminho(caminho)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico(...)\nservico.parametro('id', 1)\nservico.parametro('id', 2)\n4.\nimprimir servico.parametros() //[] - Vazio pois como cria uma cópia o serviço original não é alterado\nservico = servico.parametro('id', 1)\n.parametro('id', 2)\n8.\nimprimir servico.parametros() //[id : [1,2]] - pois atribuímos a cópia o serviço original\n```  \n#### caminho(caminho)  \nCria uma cópia da requisição atual adicionando um caminho/path na URL corrente.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\nservico.caminho('posts')\n.caminho('listar') //URL: https://jsonplaceholder.typicode.com/posts/listar\n```  \n#### aceitarTipoMidia(midias)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\nservico.caminho('posts')\n.caminho('listar') //URL: https://jsonplaceholder.typicode.com/posts/listar\n```  \n#### aceitarTipoMidia(midias)  \nInforma qual tipo de mídia é aceito pela requisição. O valor padrão é Http.TODOS.  \n```bfc-script\nservico.aceitarTipoMidia('application/json')\n```  \nA API conta com algumas constantes para os tipos de mídia comuns:  \n* Http.JSON: _application/json_",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Http.JSON: _application/json_\n* Http.XML: _application/xml_\n* Http.TEXTO_XML: _text/xml_\n* Http.XHTML: _application/xhtml+xml_\n* Http.TEXTO_HTML: _text/html_\n* Http.TEXTO: _text/plain_\n* Http.FORMULARIO: _application/x-www-form-urlencoded_",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* Http.MULTIPART: _multipart/form-data_\n* Http.ARQUIVO: _application/octet-stream_\n* Http.TODOS: _*/*_\n```bfc-script\nservico.aceitarTipoMidia(Http.JSON)\nservico.aceitarTipoMidia([Http.JSON, Http.XML])\n```  \n#### credenciais(usuario, senha)  \nConfigura a autenticação básica HTTP no serviço.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```0  \n#### tempoLimite(valor)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```0  \n#### tempoLimite(valor)  \nDefine o tempo limite para requisições executadas a partir do serviço. O valor deve ser informado em milissegundos.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```1  \n#### GET (Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```1  \n#### GET (Mapa[marcadores])  \nExecuta uma chamada do tipo GET ao serviço retornando uma representação de resposta.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```2  \n#### OPTIONS (Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```2  \n#### OPTIONS (Mapa[marcadores])  \nExecuta uma chamada do tipo OPTIONS ao serviço retornando uma representação de resposta.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```3  \n#### HEAD (Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```3  \n#### HEAD (Mapa[marcadores])  \nExecuta uma chamada do tipo HEAD ao serviço retornando uma representação de resposta.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```4  \n#### TRACE (Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```4  \n#### TRACE (Mapa[marcadores])  \nExecuta uma chamada do tipo TRACE ao serviço retornando uma representação de resposta.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```5  \n#### DELETE ()  \n#### DELETE (Mapa[marcadores])  \n#### DELETE (dados, Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### DELETE (dados, Mapa[marcadores])  \n#### DELETE (dados, Tipo de mídia)  \n#### DELETE (dados, Tipo de mídia, Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Executa uma chamada do tipo DELETE ao serviço retornando uma representação de resposta. Os dados da requisição são enviados conforme tipo de mídia informado no parâmetro sendo Http.JSON (_application/json_) o valor padrão.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```6",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```6  \n#### POST (dados)  \n#### POST (dados, Mapa[marcadores])  \n#### POST (dados, Tipo de mídia)  \n#### POST (dados, Tipo de mídia, Mapa[marcadores])  \n#### POST (formulário)  \n#### POST (formulário, Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Executa uma chamada do tipo POST ao serviço retornando uma representação de resposta. Os dados/formulário da requisição são enviados conforme tipo de mídia informado no parâmetro sendo Http.JSON (_application/json_) o valor padrão.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```7",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```7  \n#### PUT (dados)  \n#### PUT (dados, Mapa[marcadores])  \n#### PUT (dados, Tipo de mídia)  \n#### PUT (dados, Tipo de mídia, Mapa[marcadores])  \n#### PUT (formulário)  \n#### PUT (formulário, Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Executa uma chamada do tipo PUT ao serviço retornando uma representação de resposta. Os dados/formulário da requisição são enviados conforme tipo de mídia informado no parâmetro sendo Http.JSON (_application/json_) o valor padrão.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```8",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```8  \n#### PATCH (dados)  \n#### PATCH (dados, Mapa[marcadores])  \n#### PATCH (dados, Tipo de mídia)  \n#### PATCH (dados, Tipo de mídia, Mapa[marcadores])  \n#### PATCH (formulário)  \n#### PATCH (formulário, Mapa[marcadores]",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Executa uma chamada do tipo PATCH ao serviço retornando uma representação de resposta. Os dados/formulário da requisição são enviados conforme tipo de mídia informado no parâmetro sendo Http.JSON (_application/json_) o valor padrão.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts/{ano}/{id}')\n```9  \n#### METODO (método)  \n#### METODO (Mapa[marcadores], método)  \n#### METODO (método, dados)  \n#### METODO (método, dados, Mapa[marcadores])  \n#### METODO (método, tipo de mídia)  \n#### METODO (método, dados, tipo de mídia)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### METODO (método, dados, tipo de mídia)  \n#### METODO (método, dados, tipo de mídia, Mapa[marcadores])  \n#### METODO (formulário)  \n#### METODO (formulário, Mapa[marcadores]",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "A função METODO é utilizada para realizar chamadas utilizando métodos personalizados. Tem como retorno uma representação de resposta. Os dados/formulário da requisição quando existentes são enviados conforme tipo de mídia informado no parâmetro",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "conforme tipo de mídia informado no parâmetro sendo Http.JSON (_application/json_) o valor padrão.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```0  \n#### Formulários  \nPara permitir o uso de serviços web onde os dados são recebidos no formato de formulários (form), a API conta com os seguintes facilitadores:  \n##### Formulario",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para criar um novo formulário de dados deve-se utilizar as funções **criarFormulario()** ou **criarFormulario(tipo de mídia formulário)**. Estas funções criam um novo formulário utilizando como tipo de mídia o valor Http.FORMULARIO",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "como tipo de mídia o valor Http.FORMULARIO (application/x-www-form-urlencoded). A mídia pode ser alterada informando no parâmetro da função o tipo de mídia desejada.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```1  \n###### parametro(nome, valor)  \nAdiciona um parâmetro ao formulário atual.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```2  \n###### parametro(Mapa[nome, valor])  \nAdiciona um ou mais parâmetros ao formulário atual bom base em uma mapa.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```3",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```3  \n###### POST()  \n###### POST(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo POST.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```4  \n###### PUT()  \n###### PUT(Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### PUT()  \n###### PUT(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo POST.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```5  \n###### PATCH()  \n###### PATCH(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo POST.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```6  \n###### METODO(método)  \n###### METODO(método, Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método um valor personalizado.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```7  \n##### Formulario Multipart",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Para criar um novo formulário multipart deve-se utilizar as funções **criarFormularioMultipart()** ou **criarFormularioMultipart(tipo de mídia formulário)**. Estas funções criam um novo formulário multipart utilizando como tipo de mídia o valor",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "multipart utilizando como tipo de mídia o valor Http.MULTIPART (multipart/form-data). A mídia padrão pode ser alterada informando no parâmetro da função o tipo de mídia desejada.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "Formulários multipart geralmente são utilizados para envio de dados e arquivos (upload) em um requisição.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```8  \n###### parametro (nome, valor)  \n###### parametro (nome, valor, tipo de mídia)  \n###### parametro (Mapa[nome:valor])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### parametro (Mapa[nome:valor])  \n###### parametro (Mapa[nome:valor])  \nAdiciona um ou mais parâmetro(s) ao formulário atual. Este parâmetro pode conter um tipo de mídia diferente ao do formulário.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```9  \n###### POST()",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com/posts')\nservico.cookie('Usuario', 'João da Silva')\nservico.cookie('Usuario', 'João da Silva', '/usuarios', 'betha.com.br', 1)\nservico.cookie([ Usuario: 'João da Silva', Accesso: 'sim' ])\n```9  \n###### POST()  \n###### POST(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo POST.  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```0  \n###### PUT()  \n###### PUT(Mapa[marcadores])",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "###### PUT()  \n###### PUT(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo PUT.  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```1  \n###### PATCH()  \n###### PATCH(Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método o verbo PATCH.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```2  \n###### METODO(método)  \n###### METODO(método, Mapa[marcadores])  \nEnvia o formulário utilizando como tipo de método um valor personalizado.  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```3  \n### Resposta",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```3  \n### Resposta  \nUma chamada à um serviço web quando executada tem como retorno uma representação de resposta. Esta resposta pode ser processada/lida de maneiras distintas conforme necessidade.  \nAs opções disponíveis são:",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "As opções disponíveis são:  \n#### codigo()  \nRetorna o código HTTP da resposta.  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```4  \n#### tipoMidia()  \nRetorna o tipo de mídia da resposta  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```5  \n#### ehJson()  \nIndica se o tipo de mídia da resposta é do tipo JSON",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```6  \n#### sucesso()  \nIndica se o código resposta é considerado como sucesso segundo o padrão HTTP.  \n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```7  \n#### tamanho()",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```7  \n#### tamanho()  \nRetorna o tamanho do conteúdo segundo o cabeçalho da resposta (Content-Length) recebido. Caso o valor não seja retornado pelo servidor ou seja inválido retorna -1.  \n#### contemResultado()",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### contemResultado()  \nIndica se a requisição retornou algum resultado. Esta verificação é realizada com base no conteudo() e no tamanho() da mensagem e pode ou não estar presente dependendo de cada serviço utilizado.  \n#### ultimaModificacao()",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### ultimaModificacao()  \nRetorna a data da ultima modificação do resultado. Este valor é obtido do resultado da requisição e pode ou não estar presente dependendo de cada serviço utilizado.  \n#### cookie(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### cookie(nome)  \nRecupera um cookie da resposta com base no nome. Um cookie pode conter as seguintes informações:  \n* **nome()** : Nome do cookie\n* **valor()** : Valor do cookie\n* **valorCodificado()** : Valor do cookie codificado no padrão URL",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **valorDecodificado()** : Valor do cookie no padrão URL decodificado\n* **caminho()** : Caminho/Path do cookie\n* **dominio()** : Domínio do cookie\n* **versao()** : Versão do cookie (número)\n* **comentario()** : Comentário do cookie",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **comentario()** : Comentário do cookie\n* **idadeLimite()** : Idade limite/tempo de duração do cookie (maxAge)\n* **expira()** : Data de expiração do cookie\n* **ehSeguro()** : Indica se é seguro\n* **ehSomenteHttp()** : Indica se é somente HTTP",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": false
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **ehSomenteHttp()** : Indica se é somente HTTP\n```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```8  \n#### contemCookie(nome)  \nIndica se a resposta contém um cookie com o nome informado no parâmetro.  \n#### cookies()  \nRecupera uma lista contendo os cookies retornados na resposta.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico.cabecalho('Authorization', 'Basic ABCF5065FGC==')\nservico.cabecalho('User', ['murphy', 'luiz.silva'])\nservico.cabecalho([ User: 'alex.o.leao'])\n```9  \n#### cabecalho(nome)  \nRecupera um cabeçalho(Header) da resposta com base no nome. Um cabeçalho poder conter as seguintes informações:  \n* **nome()** : Nome do cabeçalho",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "* **nome()** : Nome do cabeçalho\n* **valores()** : Uma lista contendo todos os valores do cabeçalho\n* **valor()** : O primeiro valor encontrado do cabeçalho\n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```0  \n#### contemCabecalho(nome)",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```0  \n#### contemCabecalho(nome)  \nIndica se a resposta contém um cabeçalho (Header) com o nome informado no parâmetro.  \n#### cabecalhos()  \nRecupera uma lista contendo os cabeçalhos retornados na resposta.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```1",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```1  \n#### cookie(nome)  \nRetorna o cookie (caso definido)  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```2  \n#### imprimir()  \nImprime o conteúdo da resposta no console do editor de scripts.  \n#### conteudo()  \nRetorna o conteúdo da resposta no formato de caracteres.",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```3  \n#### arquivo()  \nRetorna uma fonte de arquivo que contém o conteúdo da resposta. Esta opção deverá ser utilizada em conjunto com as demais APIs da engine de scripts.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```4  \n#### json()",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_http",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```4  \n#### json()  \nRetorna o resultado de uma serviço JSON como Mapa/Lista de mapa.  \n```bfc-script\nservico = Http.servico('https://jsonplaceholder.typicode.com')\n2.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/posts?id=5\nservico.caminho('posts')\n.parametro('id', 5)\n.GET()\n7.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins?id=5\nservico.caminho('users')\n.caminho('admins')\n.parametro('id', 2)\n.GET()\n13.\n//Caso se deseje alterar a requisição original basta associar a cópia ao serviço original, desta forma\n//todas as requisições criadas à partir deste serviço utilizaram estes caminhos\nservico = servico.caminho('users')\n.caminho('admins')\n18.\n//Gera uma chamada GET ao endereço https://jsonplaceholder.typicode.com/users/admins/ativos?id=5\nservico.caminho('ativos')\n.parametro('id', 5)\n.GET()\n```5",
        "metadata": {
            "source": "docs/BFC Doc/API_http.md"
        },
        "contains_code": true
    },
    {
        "document": "API_execucao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Execução  \nO bfc-script disponibiliza uma API para a consulta das informações relacionadas a execução.  \n#### Consultar o protocolo da execução  \n```bfc-script\nExecucao.atual.protocolo\n```  \n#### Consultar se a execução foi cancelada pelo usuário  \n```bfc-script\nExecucao.atual.foiCancelada\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_execucao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_execucao",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "```bfc-script\nExecucao.atual.foiCancelada\n```  \n### Exemplos  \nMonitorar o cancelamento e interromper a execução:  \n```bfc-script\npercorrer(...) {\n2.\n// processamento da aplicação\n4.\n// verifica e interompe caso a execução atual foi cancelada\nse(Execucao.atual.foiCancelada){\ninteromper 'Execucao cancelada'\n}\n9.\n}\n```",
        "metadata": {
            "source": "docs/BFC Doc/API_execucao.md"
        },
        "contains_code": true
    },
    {
        "document": "API_cache",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "## API de Cache  \nO bfc-script disponibiliza uma API para armazenar valores pequenos em cache (máximo de 10kb), como dados de autenticação de serviços externos. O valor é armazenado usando o contexto de sistema, database e entidade.",
        "metadata": {
            "source": "docs/BFC Doc/API_cache.md"
        },
        "contains_code": false
    },
    {
        "document": "API_cache",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Cache.adicionar(chave, valor)  \nAdiciona um novo valor no cache, com a chave informada e o tempo de expiração padrão de 12 horas.  \n```bfc-script\nCache.adicionar('meu-token', 'aaabbbccc')\n```  \n#### Cache.adicionar(chave, valor, expirarEm)",
        "metadata": {
            "source": "docs/BFC Doc/API_cache.md"
        },
        "contains_code": true
    },
    {
        "document": "API_cache",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Cache.adicionar(chave, valor, expirarEm)  \nAdiciona um novo valor no cache, com a chave informada e o tempo de expiração (opicional).  \n```bfc-script\nCache.adicionar('meu-token', 'aaabbbccc', 2.horas)\n```  \n#### Cache.recuperar(chave, valorPadrao)",
        "metadata": {
            "source": "docs/BFC Doc/API_cache.md"
        },
        "contains_code": true
    },
    {
        "document": "API_cache",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Cache.recuperar(chave, valorPadrao)  \nRecupera um valor colocado previamente no cache, ou retorna o valor padrão.  \n```bfc-script\nCache.recuperar('meu-token', '')\n```  \n#### Cache.contem(chave)  \nVerifica se o cache ontem algum valor para a chave informada.",
        "metadata": {
            "source": "docs/BFC Doc/API_cache.md"
        },
        "contains_code": true
    },
    {
        "document": "API_cache",
        "section": "Geral",
        "subsection": "",
        "subsubsection": "",
        "content": "#### Cache.remover(chave)  \nRemove o valor para chave informada.",
        "metadata": {
            "source": "docs/BFC Doc/API_cache.md"
        },
        "contains_code": false
    }
]